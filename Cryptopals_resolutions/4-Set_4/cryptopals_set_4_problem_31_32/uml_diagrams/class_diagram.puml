@startuml

class Server {
    - _keyServer : std::vector<unsigned char>
    - _app : crow::SimpleApp
    - _hmac : std::shared_ptr<MyCryptoLibrary::HMAC>
    - _portProduction : int
    - _portTest : int

    + Server()
    + ~Server()
    + runServer() : void
    + runServerTest() : void
    - setupRoutes() : void
    - rootEndpoint() : void
    - signatureVerificationEndpoint() : void
    - insecureSignatureCompare(v1 : std::vector<unsigned char>, v2 : std::vector<unsigned char>) : void {static}
}

Server --> MyCryptoLibrary.HMAC : "has a"

namespace MyCryptoLibrary {
    class SHA <<abstract>> {
        + SHA()
        + ~SHA()
        + hash(inputV : std::vector<unsigned char>) : std::vector<unsigned char>
    }

    class SHA1 {
        - _sizeOutputHash : std::size_t
        - _inputVpadded : std::vector<unsigned char>
        - _h0 : uint32_t
        - _h1 : uint32_t
        - _h2 : uint32_t
        - _h3 : uint32_t
        - _h4 : uint32_t
        - _ml : uint64_t

        + SHA1()
        + ~SHA1()
        + hash(inputV : std::vector<unsigned char>) : std::vector<unsigned char>
        + hash(inputV : std::vector<unsigned char>, h0 : uint32_t, h1 : uint32_t, h2 : uint32_t, h3 : uint32_t, h4 : uint32_t, messageSize: std::size_t) : std::vector<unsigned char>
        - initialization(sizeInputV : std::size_t) : void
        - initialization(sizeInputV : std::size_t, h0 : uint32_t, h1 : uint32_t, h2 : uint32_t, h3 : uint32_t, h4 : uint32_t) : void
        - preProcessing(inputV : std::vector<unsigned char>) : void
        - processing() : void
        - leftRotate(value : uint32_t, bits : int) : uint32_t
    }

    SHA <|-- SHA1 : "inherits"

    class HMAC <<abstract>> {
        # _opad : unsigned char
        # _ipad : unsigned char
        # _sha : std::shared_ptr<MyCryptoLibrary::SHA>

        + HMAC()
        + ~HMAC()
        + hmac(key : std::vector<unsigned char>, message : std::vector<unsigned char>) : std::vector<unsigned char>
        # computeBlockSizedKey(key : std::vector<unsigned char>, blockSize : std::size_t) : std::vector<unsigned char>
    }

    class HMAC_SHA1 {
        - _blockSize : std::size_t
        - _opadV : std::vector<unsigned char>
        - _ipadV : std::vector<unsigned char>
        - _keyBlock : std::vector<unsigned char>

        + HMAC_SHA1()
        + ~HMAC_SHA1()
        + hmac(key : std::vector<unsigned char>, message : std::vector<unsigned char>) : std::vector<unsigned char>
        - computeBlockSizedKey(key : std::vector<unsigned char>, blockSize : std::size_t) : std::vector<unsigned char>
    }

    HMAC <|-- HMAC_SHA1 : "inherits"
    HMAC --> SHA : "has a"
}

class Attacker {
    - _portServerProduction : int
    - _portServerTest : int
    - _attackSamples : int

    + Attacker()
    + ~Attacker()
    + breakHmacSHA1(fileName : std::string) : std::tuple<bool, std::string>
    - sendRequest(signature : std::string, fileName : std::string) : std::tuple<bool, cpr::Response> {static}
    - printServerResponse(response : cpr::Response) : void {static}
}

Attacker --> Server : "<<uses HTTP requests>>"

@enduml