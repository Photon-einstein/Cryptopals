@startuml

namespace PrintFormat {
    enum Format {
        +HEX 
        +DECIMAL 
        +ASCII
    }
}

class Server {
    - _debugFlag : bool
    - _sha : std::shared_ptr<MyCryptoLibrary::SHA>
    - _plaintextV : std::vector<unsigned char> 
    - _plaintext : std::string
    - _hashOpenSSL : std::vector<unsigned char>
    - _hash : std::vector<unsigned char>
    - _key : std::vector<unsigned char>
    - _keyServer : std::vector<unsigned char>
    - _iv : unsigned char[]
    - _keysFileLocation : std::string
    
    + Server(debugFlag : bool)
    + ~Server()
    + hashSHA1(inputV : std::vector<unsigned char>, originalMessage : std::string) : std::vector<unsigned char>
    + checkMac(message : std::string, mac : std::vector<unsigned char>) : bool
    + getHashOutputSize() : void
    - printMessage(originalMessage : std::string, hash : std::vector<unsigned char>, format : PrintFormat::Format) : void
    - setKey(message : std::string) : void
    - prependKey(inputV : std::vector<unsigned char>) : std::vector<unsigned char>
    - extractFile(fileLocation : std::string) : std::string
    - handleErrors() : void {static}
    - decrypt(ciphertext : std::vector<unsigned char>, key : std::string, plaintext : std::string, iv : unsigned char *) : void {static}
    - removePKCS7Padding(data : std::vector<unsigned char>) : void {static}
    - hexToBytes(hexStr : std::string) : std::vector<unsigned char> {static}
}

namespace MyCryptoLibrary {
    class SHA <<abstract>> {
        + SHA()
        + ~SHA()
        + hash(inputV : std::vector<unsigned char>) : std::vector<unsigned char>
        + getHashOutputSize() : std::size_t
    }

    class SHA1 {
        - _sizeOutputHash : std::size_t
        - _inputVpadded : std::vector<unsigned char>
        - _h0 : uint32_t
        - _h1 : uint32_t
        - _h2 : uint32_t
        - _h3 : uint32_t
        - _h4 : uint32_t
        - _ml : uint64_t

        + SHA1()
        + ~SHA1()
        + getHashOutputSize() : std::size_t
        + hash(inputV : std::vector<unsigned char>) : std::vector<unsigned char>
        - initialization(sizeInputV : std::size_t) : void
        - preProcessing(inputV : std::vector<unsigned char>) : void
        - processing() : void
        - leftRotate(value : uint32_t, bits : int) : uint32_t
    }

    SHA <|-- SHA1 : "inherits"
}

class Attacker {
    - _server : std::shared_ptr<Server>
    - _sha : std::shared_ptr<MyCryptoLibrary::SHA>
    - _writeToFile : bool

    + Attacker(server : std::shared_ptr<Server>, writeToFile : bool)
    + ~Attacker()
    + setServer(server : std::shared_ptr<Server>) : void
    + tamperMessageTry(messageLocation : std::string) : void
    - extractMessage(messageLocation : std::string) : std::string {static}
    - toHexString(data : std::vector<unsigned char>) : std::string {static}
}

Server --> MyCryptoLibrary.SHA : "has a"
Attacker --> MyCryptoLibrary.SHA : "has a"
Attacker --> Server : "has a"

@enduml
