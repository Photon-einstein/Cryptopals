#include <gtest/gtest.h>

#include <filesystem>
#include <string>
#include <vector>

#include "../include/DhParametersLoader.hpp"
#include "../include/DiffieHellman.hpp"

class DhParametersLoaderTest : public ::testing::Test {
protected:
  // cppcheck-suppress unusedFunction
  void SetUp() override {
    // NOLINTNEXTLINE(clang-analyzer-optin.cplusplus.VirtualCall)
    _diffieHellman = std::make_unique<MyCryptoLibrary::DiffieHellman>(
        _dhDebugFlag); // Shared setup
  }

  // cppcheck-suppress unusedFunction
  void TearDown() override {
    // NOLINTNEXTLINE(clang-analyzer-optin.cplusplus.VirtualCall)
    // Cleanup (if needed)
  }

  // cppcheck-suppress unusedStructMember
  std::map<std::string, DhParametersLoader::DhParameters> _dhParametersMap;
  std::unique_ptr<MyCryptoLibrary::DiffieHellman> _diffieHellman;
  const bool _dhDebugFlag{false};
};

/**
 * @test Test the correctness of the method loadDhParameters
 * @brief Ensures that the parameters retrieved, using the correct input
 * filename retrieve the correct data.
 */
TEST_F(DhParametersLoaderTest,
       loadDhParameters_WithCorrectFilename_ShouldMatchReference) {
  _dhParametersMap = DhParametersLoader::loadDhParameters(
      _diffieHellman->getDhParametersFilenameLocation());
  ASSERT_EQ(_dhParametersMap.size(), 6);
  ASSERT_EQ(_dhParametersMap["cryptopals-group-33-small"].pHex, "25");
  ASSERT_EQ(_dhParametersMap["cryptopals-group-33-small"].gHex, "05");
  ASSERT_EQ(_dhParametersMap["rfc3526-group-14"].pHex,
            "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC7402"
            "0BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1"
            "356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386B"
            "FB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA4836"
            "1C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED5290770"
            "96966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E"
            "86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956A"
            "E515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF");
  ASSERT_EQ(_dhParametersMap["rfc3526-group-14"].gHex, "02");
  ASSERT_EQ(
      _dhParametersMap["rfc3526-group-15"].pHex,
      "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA6"
      "3B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245"
      "E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F2411"
      "7C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F"
      "83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08"
      "CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9"
      "DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D"
      "04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7"
      "ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D8760273"
      "3EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB31"
      "43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF");
  ASSERT_EQ(_dhParametersMap["rfc3526-group-15"].gHex, "02");
  ASSERT_EQ(
      _dhParametersMap["rfc3526-group-16"].pHex,
      "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA6"
      "3B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245"
      "E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F2411"
      "7C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F"
      "83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08"
      "CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9"
      "DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D"
      "04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7"
      "ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D8760273"
      "3EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB31"
      "43DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C32718"
      "6AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6"
      "287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD76"
      "2170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199"
      "FFFFFFFFFFFFFFFF");
  ASSERT_EQ(_dhParametersMap["rfc3526-group-16"].gHex, "02");
  ASSERT_EQ(
      _dhParametersMap["rfc3526-group-17"].pHex,
      "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA6"
      "3B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245"
      "E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F2411"
      "7C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F"
      "83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08"
      "CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9"
      "DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D"
      "04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7"
      "ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D8760273"
      "3EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB31"
      "43DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C32718"
      "6AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6"
      "287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD76"
      "2170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934028492"
      "36C3FAB4D27C7026C1D4DCB2602646DEC9751E763DBA37BDF8FF9406AD9E530EE5DB382F"
      "413001AEB06A53ED9027D831179727B0865A8918DA3EDBEBCF9B14ED44CE6CBACED4BB1B"
      "DB7F1447E6CC254B332051512BD7AF426FB8F401378CD2BF5983CA01C64");
  ASSERT_EQ(_dhParametersMap["rfc3526-group-17"].gHex, "02");
  ASSERT_EQ(
      _dhParametersMap["rfc3526-group-18"].pHex,
      "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA6"
      "3B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245"
      "E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F2411"
      "7C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F"
      "83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08"
      "CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9"
      "DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D"
      "04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7"
      "ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D8760273"
      "3EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB31"
      "43DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C32718"
      "6AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6"
      "287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD76"
      "2170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934028492"
      "36C3FAB4D27C7026C1D4DCB2602646DEC9751E763DBA37BDF8FF9406AD9E530EE5DB382F"
      "413001AEB06A53ED9027D831179727B0865A8918DA3EDBEBCF9B14ED44CE6CBACED4BB1B"
      "DB7F1447E6CC254B332051512BD7AF426FB8F401378CD2BF5983CA01C64B92ECF032EA15"
      "D1721D03F482D7CE6E74FEF6D55E702F46980C82B5A84031900B1C9E59E7C97FBEC7E8F3"
      "23A97A7E36CC88BE0F1D45B7FF585AC54BD407B22B4154AA");
  ASSERT_EQ(_dhParametersMap["rfc3526-group-18"].gHex, "02");
}

/**
 * @test Test the correctness of the method loadDhParameters
 * @brief Ensures that if a faulty input filename is provided,
 * the loadDhParameters() will throw a runtime exception error.
 */
TEST_F(DhParametersLoaderTest,
       loadDhParameters_WithIncorrectFilename_ShouldMatchThrowAnException) {
  std::string faultyFilename =
      _diffieHellman->getDhParametersFilenameLocation();
  faultyFilename[0] ^= 0x01; // flip one bit
  try {
    _dhParametersMap = DhParametersLoader::loadDhParameters(faultyFilename);
  } catch (const std::runtime_error &e) {
    const std::string errorMessage =
        std::string("DhParametersLoader log | loadDhParameters(): ") +
        std::string("Could not open DH parameters file: '") + faultyFilename +
        "'.";
    EXPECT_STREQ(e.what(), errorMessage.c_str());
  } catch (...) {
    FAIL() << "Expected std::invalid_argument, but got a different exception";
  }
}