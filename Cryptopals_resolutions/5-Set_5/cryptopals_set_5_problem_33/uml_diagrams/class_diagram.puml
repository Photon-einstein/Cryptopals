"@startuml Diffie_Hellman_implementation_class_diagram"

class Server {
    - _diffieHellmanMapMutex : std::mutex
    - _diffieHellmanMap : std::map<boost::uuids::uuid, std::unique_ptr<SessionData>>
    - _nonceSize : std::size_t
    - _app : crow::SimpleApp
    - _portProduction : int
    - _portTest : int
    - _serverThread : std::thread
    - _debugFlag : bool
    - _ivLength : std::size_t
    
    + Server(debugFlag : bool) {explicit}
    + ~Server()
    + runServer() : void
    + runServerTest() : void
    + clearDiffieHellmanSessionData() : void
    + getProductionPort() : int
    + getTestPort() : int
    - setupRoutes() : void
    - rootEndpoint() : void
    - keyExchangeRoute() : void
    - getSessionsDataEndpoint() : void
    - generateUniqueSessionId() : boost::uuids::uuid
}

note "Exposes API Endpoints:\n- **POST /keyExchange** (Diffie-Hellman Key Exchange)\n- **GET /sessionsData** (Retrieve Session Data)" as ServerEndpointsNote
Server .. ServerEndpointsNote

class Client {
    - _diffieHellmanMap : std::map<std::string, std::unique_ptr<SessionData>>
    - _portServerProduction : int
    - _portServerTest : int 
    - _clientId : std::string
    - _nonceSize : std::size_t
    - _debugFlag : bool

    + Client(clientId : std::string, debugFlag : bool) {explicit}
    + ~Client()
    + diffieHellmanKeyExchange(portServerNumber : int) : void
    + confirmSessionId(sessionId : std::string) : bool
    + getClientId() : std::string {const}
    + getProductionPort() : int {const}
    + getTestPort() : int {const}
    + verifyServerSessionDataEntryEndpoint(sessionId : std::string, clientId : std::string, clientNonce : std::string, serverNonce : std::string, derivedKey : std::string, iv : std::string) : bool {const}
    - printServerResponse(response : cpr::Response) : void {static}
    - confirmationServerResponse(ciphertext : std::string, key : std::vector<uint8_t>, iv : std::vector<uint8_t>, sessionId : std::string, clientId : std::string, clientNonce : std::string, serverNonce : std::string, message : std::string) :  std::tuple<bool, std::string>
}

class SessionData <<struct>> {
    - _diffieHellman : std::unique_ptr<MyCryptoLibrary::DiffieHellman>
    - _serverNonceHex : std::string
    - _clientNonceHex : std::string
    - _derivedKeyHex : std::string
    - _clientId : std::string
    - _iv : std::vector<uint8_t>

    + SessionData(nonceSize : std::size_t, clientNonceHex : std::string, clientId : std::string, debugFlag : bool, ivLength : std::size_t)
    + SessionData(diffieHellman : std::unique_ptr<MyCryptoLibrary::DiffieHellman>, serverNonceHex : std::string, clientNonceHex : std::string, iv : std::vector<uint8_t>)
}

namespace MyCryptoLibrary {
    class DiffieHellman {
        - _dhParametersFilename : std::string
        - _dhParameter : DhParametersLoader::DhParameters
        - _p : MessageExtractionFacility::UniqueBIGNUM
        - _g : MessageExtractionFacility::UniqueBIGNUM
        - _privateKey : MessageExtractionFacility::UniqueBIGNUM
        - _publicKey : MessageExtractionFacility::UniqueBIGNUM
        - _sharedSecret : MessageExtractionFacility::UniqueBIGNUM
        - _debugFlag : bool
        - _derivedSymmetricKey : std::vector<uint8_t>
        - _derivedSymmetricKeyHex : std::string
        - _confirmationMessage : std::string

        + DiffieHellman(debugFlag : bool) {explicit}
        + ~DiffieHellman() 
        + getPublicKey() : std::string {const}
        + getGroupName() : std::string {const}
        + deriveSharedSecret(peerPublicKeyHex : std::string, serverNonceHex : std::string, clientNonceHex : std::string) : std::string
        + getSymmetricKey() : std::vector<uint8_t> {const}
        + getConfirmationMessage() : std::string {const}
        + getDhParametersFilenameLocation() : std::string {const}
        - generatePrivateKey() : void
        - generatePublicKey() : void
    }
}

namespace MessageExtractionFacility {
  class UniqueBIGNUM <<typedef>> {
    - BIGNUM* (with custom deleter)
  }

  class ConversionUtility {
    + hexToBytes(hexStr: std::string) : std::vector<unsigned char> {const}
    + toHexString(data: std::vector<unsigned char>) : std::string {const}
    + hexToUniqueBIGNUM(hexNumber: std::string) : UniqueBIGNUM {const}
    + BIGNUMToHex(bn: BIGNUM*) : std::string {const}
    + BIGNUMToDec(bn: BIGNUM*) : std::string {const}
  }
}

namespace DhParametersLoader {
    class DhParameters <<struct>> {
        + _groupName : std::string
        + _pHex : std::string
        + _gHex : std::string
        + _description : std::string
        + _notes : std::string
    }
    class Loader {
        {static} + loadDhParameters(filename : std::string) : std::map<std::string, DhParameters>
    }
}


MyCryptoLibrary.DiffieHellman --> DhParametersLoader : uses
MyCryptoLibrary.DiffieHellman --> MessageExtractionFacility : uses

Server --> SessionData : uses
Client --> SessionData : uses

Client --> Server : "<<uses HTTP requests>>"

SessionData --> MyCryptoLibrary.DiffieHellman : "has a"

@enduml