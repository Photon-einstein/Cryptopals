import hashlib

def hex_to_int(h):
    return int(h, 16)

def calculate_k(N_hex, g, hash_name):
    N_bytes = bytes.fromhex(N_hex)
    g_bytes = g.to_bytes((g.bit_length() + 7) // 8, 'big')
    g_padded = b'\x00' * (len(N_bytes) - len(g_bytes)) + g_bytes
    input_bytes = N_bytes + g_padded
    h = getattr(hashlib, hash_name.lower().replace('-', ''))
    k = h(input_bytes).hexdigest()
    return int(k, 16)

def calculate_S(B_hex, k, g, x_hex, a_hex, u_hex, N_hex):
    B = int(B_hex, 16)
    x = int(x_hex, 16)
    a = int(a_hex, 16)
    u = int(u_hex, 16)
    N = int(N_hex, 16)
    gx = pow(g, x, N)
    
    kgx = (k * gx) % N
    base = (B - kgx) % N
    exp = (a + u * x) % N
    S = pow(base, exp, N)
    
    byte_len = (N.bit_length() + 7) // 8
    S_hex = format(S, '0{}X'.format(byte_len * 2))
    return S_hex

if __name__ == "__main__":
    import json
    B_hex = (
    "2CCC8822FA0BDF170F4604F739AAC5C2952DE8A5EA1017F43AE492DA3CE416"
    "BC5ACC45AFB28C8A634412CE37549BF9035C952850837E023B8C0844BF4D4B"
    "E233D6194A54C8972864055466F31B61BE6F0DDBCF6319CB50965E24063DCE"
    "77FD63C6568775F8DDCA7F1206AD4848CD77188343AC57727CD68C281E5516"
    "9AD9320CF2262C6F2A9F22E8C01C4D87BFCE81FDF21E9E0425CDC842FF037B"
    "575B123C597582C03F10D9CE9201AC14122648ED46991DEA46A81EDE6092DE"
    "E42CE45CD92709D08EFF75CAFCC91C8FB5CC9CF57BDDB4F9C51F08C771B946"
    "6EE8287C4AA2373706E8A9B389F012BC4DAA4D4A018EF07489095F266F2FCC"
    "A643B5E215C693F7ACED97D4501D9E0F71163002C66AC55EEAC7F6B79FBDB3"
    "8869F66F98C9003559BBC2D8905CE62B9851193D5F3142B36573066A155181"
    "0507E4420011F1455D886DD62B70D1C582C41F6B0A052F8095682E66A11974"
    "CCEA240005B7479F84FB5053022DECEFBCF11D65F5767FC3640D9DF0F7BEB3"
    "681C6EBB5C95A1E539809217C8BBA83330F11F9F3D848973C4B933E2E6FA4C"
    "2110714E50B6F00E621F51BDD3E412C2408CD81BFF798E4092FCD55BE2C04A"
    "87D8F4FB1203A588668777B0BE63DF0A01E9753FD512192941473939543941"
    "39BD783DFA7F915FC881DDB5C52F53CAD601EF1DEB141E81E39B4EFC3AE84F"
    "1C064A08FC057A795C6475C374790B2DD935E228726C7C49E818CB017E1351"
    "F94FC04813074EB2D7E4425B407161997A8BC60245881BBD7FE96914676ED6"
    "2AC08DD2CE09C2C3DA2A702F4F28B76E853D5FA742D240BCEF8EA109E14DF4"
    "FA8E473110CFABB0D0D7E8353AB940BEA35BA53A8D87F0688F5018D4B0193B"
    "EC4D88A31E6DFDFD68130B91A00133ACA11DD06AD2597C522D9D3F8848E818"
    "892E99D1E8A765C8697015FDF5AFE7BFD236F1013EF570A4C9C692357BF9E0"
    "37D7E85DDA709FB2210AE7563FCBEF650238395F29CC84D1C4D69A2ED8F2D5"
    "58EFA579E021C04EB5717E0C451181C0F922D6F66767F2FEA9AE3BC53B7C89"
    "37203314D31BC281F4E7389A808BB3CBF503F22F07E4382819071FC743C51F"
    "98DCD307C7EC2BF85183FD0EC9CBC51D316855017CA5BCECCF29775AC22A49"
    "35B9B26D5843D049AA1DB8A20D0B51BE0DB73AC416DE60A71B586688055A82"
    "3A7834B5B7C38859116979BBC71817E1559824274AB48FF7EAAB0748B8C724"
    "3910E7AF147CBECB8448729321A7AFB9FCD195B4D0CBF103250961A8CB6FD1"
    "9AA5A3063E462FD95835B7178886C08CC4DCF8F0AC111535E3E59FD7314A99"
    "E809718E24479FCA7F037C96A3976936BD4EB9801D99DD2BFDBD3E750223D7"
    "71672ADDD6BE6B208610C86127632FE89C936214C17934244BA95F23B572BE"
    "A0CA149185D39AB180F7EC871653BD8108BEF9219928B3B07A6C9E7233DA02"
    "22")  # Example
    x_hex = (
    "121F773DEE392FF993A08983C3818EA4B9EA5599607E2745C35CB145A9A581"
    "FDF59D663345EAD48EC3D96B85BDE691DC46FB4E62446F0C52B5120D2FFBD7"
    "C340")  # Example
    a_hex = (
    "ADEBD662C22FA9628A187C02BCB9A0BD84A3B7719D5993F7022C273218F0EF"
    "737E937FFB3D4166D096AB8B424BB0ECE76FA698761DA7BB4C4BCE9DD95B93"
    "3E43862249ED3A6D8D6CAC6A8357E0A75665DE247C414B0DFEDD158FD216F0"
    "3DADB6EC15D0F2E7159E34607BF729DF6164970964F01DEDDADA3CAFEC6580"
    "89F8C2D4CD253B33272876EE0778D472B8260CAF9B7DEC46B2C333AEEDA7EF"
    "2160FDE31D052B41A3255F2B9457300DEAC0DAECDB0B406E4C352DFFC46345"
    "E86665ECB22F100E5EB812F9A11B2B0953B09F68B06EBFC937BABD38DC8F26"
    "4E94C56A1D2A8781BF3DBA36C7E4F4CC626958BABBF4490321F6B39A0A6178"
    "F09325077763DBD2D379C9300D58FB22436A9E1D7462BE8E71C6B78001385C"
    "E8665037D8EAB7AC1F67B5C91C22CF87980125A8D033A69EBFAE9E70255498"
    "B9ACB49BED258108349BEDA81158CDF95732C3124B278D8B71FE7743D60CEC"
    "5AFC3A115BF98793694D09D7D6860436B5483AF4FB95E8D6CAC4059F71244C"
    "13939452F70932E6EA2DE661B0F09E20E788771308B51F69CAF1A89069C3E9"
    "411B36F6213C71FB2ABE309648D4E204EE9FED6A9642ABF291BC01A48E1A17"
    "8D5A61114513D22FBA869AFC125BBA7C50A96D7DEA59F0AC6A5A0AA0C602CB"
    "D00619EBBF57CB1FB001B782066D0789C177944ED9E7A1DC545B03FE75BB81"
    "150A0FCC96A5BA3726B40C2E0544F58B3BD29733A9F2AD37B0EDAF2F5E64E2"
    "F5CCC329AF752DBAD2EB0EFB51344D6A621AD5DF6A3B4BA8AFCE673A9D559D"
    "1F3C35D4BF51D33FE91337F881A4CCAE23E7A0B2649E82BB87B6FF87638CD4"
    "58761C9B2F806DA8FCA035846CD43468C45C9CA0B340523F22985A46F98979"
    "0371C8B398498BA1CBD546EA29DA9BD55E9E9EB03679985A3A3557CF33FC7D"
    "28DA42816457A2548757391A8728DA277266FD34BB0220B373C92E9E743C77"
    "3DC2157BB98934E8A030E700337B4FE88BDE49DBB9BC409B44D79B4F616127"
    "3EC757CEABDFF2CA58107126706E1F32E970F802F47EF11A7886F4DCB25F34"
    "4405B76972872D001F6A79F20934D278FFCDAA73C46D9A3D76360BDF879F34"
    "256CE95C1A33065092B4F4DB76DF1738B8A3E5373F4D407E3466D93410F59F"
    "8ED6B607756FA5C892075154F3276774B48D03DEB37B50C5BA108AD5943525"
    "BA07BECF7A05BC220C8D4FF376D9F82BF1E61BAE5F849BE0A931237F90733C"
    "B7A193C9AD40FAA9D2073D082E19B7CFBDA89FB09EC334A15BED51DAF197BB"
    "0A13C6F7105C499C7225E263257FB4E6E4346E03D94B86FFB206574E75BB8B"
    "D81988E034CFAEAE15754FA8136E04FCD9B77A948B477A70D6548C61D29DE0"
    "810B8D62D554DD6B87FBBE40D62FBDD24D0B94030BC629B647D2A93F99B090"
    "7344399049E3AF6406AAAEB057D23F3C24A5FC6CD3D8CC21A2CCA6FBA6EE58"
    "B9")
    u_hex = (
    "121F773DEE392FF993A08983C3818EA4B9EA5599607E2745C35CB145A9A581"
    "FDF59D663345EAD48EC3D96B85BDE691DC46FB4E62446F0C52B5120D2FFBD7"
    "C340") # Example
    # Load SRP groups from JSON
    with open("../input/SrpParameters.json", "r") as f:
        srp_params = json.load(f)

    for group in srp_params["srpGroups"]:
        groupId = group["groupId"]
        g = group["generatorG"]
        hash_name = group["hash"]
        # Concatenate all N parts
        N_hex = "".join(group["primeN"])
        print(f"Group {groupId}: g={g}, hash={hash_name}")
        k = calculate_k(N_hex, g, hash_name)
        S_hex = calculate_S(B_hex, k, g, x_hex, a_hex, u_hex, N_hex)
        print(f"\nS = {S_hex}\n")
