#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "../include/MessageExtractionFacility.hpp"
#include "../include/SessionData.hpp"

class SessionDataTest : public ::testing::Test {
protected:
  // cppcheck-suppress unusedFunction
  void SetUp() override {
    // NOLINTNEXTLINE(clang-analyzer-optin.cplusplus.VirtualCall)
  }

  // cppcheck-suppress unusedFunction
  void TearDown() override {
    // NOLINTNEXTLINE(clang-analyzer-optin.cplusplus.VirtualCall)
    // Cleanup (if needed)
  }

  const std::map<unsigned int, SrpParametersLoader::SrpParameters>
      _srpParametersMap{SrpParametersLoader::loadSrpParameters(
          MyCryptoLibrary::SecureRemotePassword::
              getSrpParametersFilenameLocation())};
  const std::map<unsigned int, MessageExtractionFacility::UniqueBIGNUM> _kMap{
      MyCryptoLibrary::SecureRemotePassword::calculateKMultiplierParameters()};
  const std::string _BHex{
      "2CCC8822FA0BDF170F4604F739AAC5C2952DE8A5EA1017F43AE492DA3CE416"
      "BC5ACC45AFB28C8A634412CE37549BF9035C952850837E023B8C0844BF4D4B"
      "E233D6194A54C8972864055466F31B61BE6F0DDBCF6319CB50965E24063DCE"
      "77FD63C6568775F8DDCA7F1206AD4848CD77188343AC57727CD68C281E5516"
      "9AD9320CF2262C6F2A9F22E8C01C4D87BFCE81FDF21E9E0425CDC842FF037B"
      "575B123C597582C03F10D9CE9201AC14122648ED46991DEA46A81EDE6092DE"
      "E42CE45CD92709D08EFF75CAFCC91C8FB5CC9CF57BDDB4F9C51F08C771B946"
      "6EE8287C4AA2373706E8A9B389F012BC4DAA4D4A018EF07489095F266F2FCC"
      "A643B5E215C693F7ACED97D4501D9E0F71163002C66AC55EEAC7F6B79FBDB3"
      "8869F66F98C9003559BBC2D8905CE62B9851193D5F3142B36573066A155181"
      "0507E4420011F1455D886DD62B70D1C582C41F6B0A052F8095682E66A11974"
      "CCEA240005B7479F84FB5053022DECEFBCF11D65F5767FC3640D9DF0F7BEB3"
      "681C6EBB5C95A1E539809217C8BBA83330F11F9F3D848973C4B933E2E6FA4C"
      "2110714E50B6F00E621F51BDD3E412C2408CD81BFF798E4092FCD55BE2C04A"
      "87D8F4FB1203A588668777B0BE63DF0A01E9753FD512192941473939543941"
      "39BD783DFA7F915FC881DDB5C52F53CAD601EF1DEB141E81E39B4EFC3AE84F"
      "1C064A08FC057A795C6475C374790B2DD935E228726C7C49E818CB017E1351"
      "F94FC04813074EB2D7E4425B407161997A8BC60245881BBD7FE96914676ED6"
      "2AC08DD2CE09C2C3DA2A702F4F28B76E853D5FA742D240BCEF8EA109E14DF4"
      "FA8E473110CFABB0D0D7E8353AB940BEA35BA53A8D87F0688F5018D4B0193B"
      "EC4D88A31E6DFDFD68130B91A00133ACA11DD06AD2597C522D9D3F8848E818"
      "892E99D1E8A765C8697015FDF5AFE7BFD236F1013EF570A4C9C692357BF9E0"
      "37D7E85DDA709FB2210AE7563FCBEF650238395F29CC84D1C4D69A2ED8F2D5"
      "58EFA579E021C04EB5717E0C451181C0F922D6F66767F2FEA9AE3BC53B7C89"
      "37203314D31BC281F4E7389A808BB3CBF503F22F07E4382819071FC743C51F"
      "98DCD307C7EC2BF85183FD0EC9CBC51D316855017CA5BCECCF29775AC22A49"
      "35B9B26D5843D049AA1DB8A20D0B51BE0DB73AC416DE60A71B586688055A82"
      "3A7834B5B7C38859116979BBC71817E1559824274AB48FF7EAAB0748B8C724"
      "3910E7AF147CBECB8448729321A7AFB9FCD195B4D0CBF103250961A8CB6FD1"
      "9AA5A3063E462FD95835B7178886C08CC4DCF8F0AC111535E3E59FD7314A99"
      "E809718E24479FCA7F037C96A3976936BD4EB9801D99DD2BFDBD3E750223D7"
      "71672ADDD6BE6B208610C86127632FE89C936214C17934244BA95F23B572BE"
      "A0CA149185D39AB180F7EC871653BD8108BEF9219928B3B07A6C9E7233DA02"
      "22"};
  const std::string _xHex{
      "121F773DEE392FF993A08983C3818EA4B9EA5599607E2745C35CB145A9A581"
      "FDF59D663345EAD48EC3D96B85BDE691DC46FB4E62446F0C52B5120D2FFBD7"
      "C340"}; // Private key parameter x (hex)
  const std::string _aHex =
      "ADEBD662C22FA9628A187C02BCB9A0BD84A3B7719D5993F7022C273218F0EF"
      "737E937FFB3D4166D096AB8B424BB0ECE76FA698761DA7BB4C4BCE9DD95B93"
      "3E43862249ED3A6D8D6CAC6A8357E0A75665DE247C414B0DFEDD158FD216F0"
      "3DADB6EC15D0F2E7159E34607BF729DF6164970964F01DEDDADA3CAFEC6580"
      "89F8C2D4CD253B33272876EE0778D472B8260CAF9B7DEC46B2C333AEEDA7EF"
      "2160FDE31D052B41A3255F2B9457300DEAC0DAECDB0B406E4C352DFFC46345"
      "E86665ECB22F100E5EB812F9A11B2B0953B09F68B06EBFC937BABD38DC8F26"
      "4E94C56A1D2A8781BF3DBA36C7E4F4CC626958BABBF4490321F6B39A0A6178"
      "F09325077763DBD2D379C9300D58FB22436A9E1D7462BE8E71C6B78001385C"
      "E8665037D8EAB7AC1F67B5C91C22CF87980125A8D033A69EBFAE9E70255498"
      "B9ACB49BED258108349BEDA81158CDF95732C3124B278D8B71FE7743D60CEC"
      "5AFC3A115BF98793694D09D7D6860436B5483AF4FB95E8D6CAC4059F71244C"
      "13939452F70932E6EA2DE661B0F09E20E788771308B51F69CAF1A89069C3E9"
      "411B36F6213C71FB2ABE309648D4E204EE9FED6A9642ABF291BC01A48E1A17"
      "8D5A61114513D22FBA869AFC125BBA7C50A96D7DEA59F0AC6A5A0AA0C602CB"
      "D00619EBBF57CB1FB001B782066D0789C177944ED9E7A1DC545B03FE75BB81"
      "150A0FCC96A5BA3726B40C2E0544F58B3BD29733A9F2AD37B0EDAF2F5E64E2"
      "F5CCC329AF752DBAD2EB0EFB51344D6A621AD5DF6A3B4BA8AFCE673A9D559D"
      "1F3C35D4BF51D33FE91337F881A4CCAE23E7A0B2649E82BB87B6FF87638CD4"
      "58761C9B2F806DA8FCA035846CD43468C45C9CA0B340523F22985A46F98979"
      "0371C8B398498BA1CBD546EA29DA9BD55E9E9EB03679985A3A3557CF33FC7D"
      "28DA42816457A2548757391A8728DA277266FD34BB0220B373C92E9E743C77"
      "3DC2157BB98934E8A030E700337B4FE88BDE49DBB9BC409B44D79B4F616127"
      "3EC757CEABDFF2CA58107126706E1F32E970F802F47EF11A7886F4DCB25F34"
      "4405B76972872D001F6A79F20934D278FFCDAA73C46D9A3D76360BDF879F34"
      "256CE95C1A33065092B4F4DB76DF1738B8A3E5373F4D407E3466D93410F59F"
      "8ED6B607756FA5C892075154F3276774B48D03DEB37B50C5BA108AD5943525"
      "BA07BECF7A05BC220C8D4FF376D9F82BF1E61BAE5F849BE0A931237F90733C"
      "B7A193C9AD40FAA9D2073D082E19B7CFBDA89FB09EC334A15BED51DAF197BB"
      "0A13C6F7105C499C7225E263257FB4E6E4346E03D94B86FFB206574E75BB8B"
      "D81988E034CFAEAE15754FA8136E04FCD9B77A948B477A70D6548C61D29DE0"
      "810B8D62D554DD6B87FBBE40D62FBDD24D0B94030BC629B647D2A93F99B090"
      "7344399049E3AF6406AAAEB057D23F3C24A5FC6CD3D8CC21A2CCA6FBA6EE58"
      "B9"; // Client private ephemeral a (hex)
  const std::string _uHex =
      "121F773DEE392FF993A08983C3818EA4B9EA5599607E2745C35CB145A9A581"
      "FDF59D663345EAD48EC3D96B85BDE691DC46FB4E62446F0C52B5120D2FFBD7"
      "C340"; // Scrambling parameter u (hex)
};

/**
 * @test Test the correctness of the construction of the structure of Session
 * Data.
 * @brief Test the correctness of the construction of the structure of Session
 * Data, should match the expected values.
 */
TEST_F(SessionDataTest,
       SessionData_WithValidInputParameters_ShouldMatchReference) {
  const unsigned int groupId{5};
  const std::string salt{
      "8F03FE9E9F8988BE043F4D17489E7EF9BD2FA3E1B1ADA0A286F16F8E9AD4BB06"};
  const std::string hash{"SHA-256"};
  const bool debugFlag{false};
  SessionData session(groupId, salt, hash, debugFlag);
  EXPECT_EQ(session._groupId, groupId);
  EXPECT_EQ(session._salt, salt);
  EXPECT_EQ(session._hash, hash);
}

/**
 * @test Test that the constructor of SessionData throws an error when
 * an invalid group ID is given as input parameter.
 * @brief Test that the constructor of SessionData throws an error when
 * an invalid group ID is given as input parameter. The error message
 * should match the expected value.
 */
TEST_F(SessionDataTest, SessionData_WithInvalidGroupId_ShouldThrowAnError) {
  const unsigned int groupId{0};
  const std::string salt{
      "8F03FE9E9F8988BE043F4D17489E7EF9BD2FA3E1B1ADA0A286F16F8E9AD4BB06"};
  const std::string hash{"SHA-256"};
  const bool debugFlag{false};
  try {
    SessionData session(groupId, salt, hash, debugFlag);
  } catch (const std::runtime_error &e) {
    EXPECT_THAT(std::string(e.what()),
                ::testing::EndsWith("Invalid input parameters given."));
  }
}

/**
 * @test Test that the constructor of SessionData throws an error when
 * an invalid salt is given as input parameter.
 * @brief Test that the constructor of SessionData throws an error when
 * an invalid salt is given as input parameter. The error message
 * should match the expected value.
 */
TEST_F(SessionDataTest, SessionData_WithInvalidSalt_ShouldThrowAnError) {
  const unsigned int groupId{5};
  const std::string salt{""};
  const std::string hash{"SHA-256"};
  const bool debugFlag{false};
  try {
    SessionData session(groupId, salt, hash, debugFlag);
  } catch (const std::runtime_error &e) {
    EXPECT_THAT(std::string(e.what()),
                ::testing::EndsWith("Invalid input parameters given."));
  }
}

/**
 * @test Test that the constructor of SessionData throws an error when
 * an invalid hash is given as input parameter.
 * @brief Test that the constructor of SessionData throws an error when
 * an invalid hash is given as input parameter. The error message
 * should match the expected value.
 */
TEST_F(SessionDataTest, SessionData_WithInvalidHash_ShouldThrowAnError) {
  const unsigned int groupId{5};
  const std::string salt{
      "8F03FE9E9F8988BE043F4D17489E7EF9BD2FA3E1B1ADA0A286F16F8E9AD4BB06"};
  const std::string hash{""};
  const bool debugFlag{false};
  try {
    SessionData session(groupId, salt, hash, debugFlag);
  } catch (const std::runtime_error &e) {
    EXPECT_THAT(std::string(e.what()),
                ::testing::EndsWith("Invalid input parameters given."));
  }
}

/**
 * @test Test that the k multiplier map returned from the session data
 * matches the reference.
 * @brief Test that the k multiplier map returned from the session data
 * matches the reference. The k values are stored by group ID.
 */
TEST_F(SessionDataTest, SessionData_GetKMultiplierMap_ShouldMatchReference) {
  const unsigned int groupId{5};
  const std::string salt{
      "8F03FE9E9F8988BE043F4D17489E7EF9BD2FA3E1B1ADA0A286F16F8E9AD4BB06"};
  const std::string hash{"SHA-256"};
  const bool debugFlag{false};
  SessionData session(groupId, salt, hash, debugFlag);
  const std::map<unsigned int, MessageExtractionFacility::UniqueBIGNUM> &kMap =
      session._secureRemotePassword->getKMap();
  const unsigned int groupsSize{7};
  EXPECT_EQ(kMap.size(), groupsSize);
  EXPECT_EQ(MessageExtractionFacility::BIGNUMToHex(kMap.at(1).get()),
            "1A1A4C140CDE70AE360C1EC33A33155B1022DF951732A476A862EB3AB8206A5C");
  EXPECT_EQ(MessageExtractionFacility::BIGNUMToHex(kMap.at(2).get()),
            "B2286EEE1033FE2BDC950CBF0ABB6FB56670E2B4D5BDA4CB203A9A96D018625D");
  EXPECT_EQ(MessageExtractionFacility::BIGNUMToHex(kMap.at(3).get()),
            "05B9E8EF059C6B32EA59FC1D322D37F04AA30BAE5AA9003B8321E21DDB04E300");
  EXPECT_EQ(MessageExtractionFacility::BIGNUMToHex(kMap.at(4).get()),
            "081F4874FA543A371B49A670402FDA59ECFAB53A1B850FC42E1C357CC846111E");
  EXPECT_EQ(MessageExtractionFacility::BIGNUMToHex(kMap.at(5).get()),
            "13ED8E2B1E3F847DA7D4BE9DDE56C9AD9AA50EE67CDC948E4053A171EBB384DF5D"
            "6B2047D295C857C61B9504CAF00907");
  EXPECT_EQ(MessageExtractionFacility::BIGNUMToHex(kMap.at(6).get()),
            "E23815ED6634AFD9F6C2EFC31B593068347B5AF87A072252A53F18019CCDB30E75"
            "1C17AD439E1A65DB22D67EF3C181CD806CDBBA608718785707156F998C4198");
  EXPECT_EQ(MessageExtractionFacility::BIGNUMToHex(kMap.at(7).get()),
            "4D52644EEB89DCEB292AEA0DC86CF8D1EE820E92B7F840F2E075004249315CE5EB"
            "61FD1FE6F8DC35E51495357EC0B4E14CAF9EF159D093BAD019514927476AC5");
}

/**
 * @test Test the correctness of the calculation of the u = H(A | B)
 * parameter with SHA-256.
 * @brief Verifies that the scrambling parameter u, computed from known A and B
 * values using SHA-256, matches the expected reference value and has the
 * correct length.
 */
TEST_F(SessionDataTest, calculateHashConcatWithSHA256_ShouldMatchReference) {
  std::string AHex =
      "F6FDBCA9750B211E9A12DE1D60E54C7942C65D1D30826E552824E10A0777FEA1"
      "B38EE8CE5F2AC5D3BE76886D3F630EF44584382E8C303D8249420D08586B52F0"
      "81D10B0D9C4187D9CE7153E5E3190B309E7255296BDD9E4166A515C48848BF6A"
      "0F18C8C711D75429628D0A209FC603A808683D526B651F0C43F82268C203F054"
      "3ED36219F7B4534F445B7025DB6799E8EA3290682EC59DB2872EC9455BCA3B31"
      "B6EF6C552E7CBC384270A87383AB60CA99CD72889E0F64B00DD01E00E4F4192A"
      "6DBCB55ADF0C2523F177F964B4DA78AA5D022BCDEF265888C446730B19CED207"
      "3C7123FE53FF0893A486C01B4B9B1433F7A8A7689C1A4A7E99AF13B4A9248523"
      "B815BAD5D14BC94C7A05114540D9F75DCDA5BB468BF2D2FDE33D5D6634BDA360"
      "69A7CA3690BBEF1CC5BF22D41A9A9785EA962BE8C2933E07B53709C1D58D1E48"
      "6B472BEF3F8FA4722AC5B64AB49823A9BD1076C9DC7979E62EA3C230586E2A97"
      "D163CC2E000C9F54E1F43AAB8DBB1C54768DFA9E3553D94EE76107969E992325";
  std::string BHex =
      "F4D69379248D20EED58A337FB5E470B6C3ED3E3020DC88E51FED0DADA1FBAB41"
      "FD5A2E5502E2EC15373D069C309797747F08F1E7AD6453C42BF4858FFEE011AC"
      "1D09DF733B38C0D506B56D4EC8854D1DA15B69A40CB3CD6E12D90C6558C20CE2"
      "C4DB41E271008AE344FEE14BE3B33734D1D09EEEC40FE34DB81E462D608FBFBB"
      "E833EFDFACE5D7BA10DB46EAB4CFF490A99A8D65EAA4214746793286F29EE728"
      "9D7DD61B6DBD499088D80914A8E2ECD1257863C8F5821854605D1D723304DA25"
      "6F66C33CF4A87FE87A27E9CAC7B6A74CE6381587DDAB37FD3B8B70CE8B191B66"
      "F4ED27C8356CD02C6DC269C0651DB09EE07CE22064002DD624AFADAFF5393AC0"
      "422FABE39B1928B0B299B35311FDB46EE35C7E9FAC2467469A61705275B06D36"
      "FC588007F077B674126A56228C7B836271531293FBAE7FAA9F08E852F67C65EA"
      "2C598A9D7090BA64FE89A3364F87FE7B27BBED1862A01A42A348CD64AFEE58CC"
      "CA02B0764B813608C0A98DC9F815294D26746DF7DC28B79C6EABF08017406C06";
  std::string hashName = "SHA-256";
  std::string uHex = MyCryptoLibrary::SecureRemotePassword::calculateHashConcat(
      hashName, MessageExtractionFacility::hexToPlaintext(AHex),
      MessageExtractionFacility::hexToPlaintext(BHex));
  std::string expectedUHex =
      "49510A0BB9F42F1068F4446E620A4DF30453369329F2A001EF33A72510AA1810";
  EXPECT_EQ(uHex.length(), SHA256_DIGEST_LENGTH * 2);
  EXPECT_EQ(uHex, expectedUHex);
}

/**
 * @test Test the correctness of the calculation of the u = H(A | B)
 * parameter with SHA-384.
 * @brief Verifies that the scrambling parameter u, computed from known A and B
 * values using SHA-384, matches the expected reference value and has the
 * correct length.
 */
TEST_F(SessionDataTest, calculateHashConcatWithSHA384_ShouldMatchReference) {
  std::string AHex =
      "F6FDBCA9750B211E9A12DE1D60E54C7942C65D1D30826E552824E10A0777FEA1"
      "B38EE8CE5F2AC5D3BE76886D3F630EF44584382E8C303D8249420D08586B52F0"
      "81D10B0D9C4187D9CE7153E5E3190B309E7255296BDD9E4166A515C48848BF6A"
      "0F18C8C711D75429628D0A209FC603A808683D526B651F0C43F82268C203F054"
      "3ED36219F7B4534F445B7025DB6799E8EA3290682EC59DB2872EC9455BCA3B31"
      "B6EF6C552E7CBC384270A87383AB60CA99CD72889E0F64B00DD01E00E4F4192A"
      "6DBCB55ADF0C2523F177F964B4DA78AA5D022BCDEF265888C446730B19CED207"
      "3C7123FE53FF0893A486C01B4B9B1433F7A8A7689C1A4A7E99AF13B4A9248523"
      "B815BAD5D14BC94C7A05114540D9F75DCDA5BB468BF2D2FDE33D5D6634BDA360"
      "69A7CA3690BBEF1CC5BF22D41A9A9785EA962BE8C2933E07B53709C1D58D1E48"
      "6B472BEF3F8FA4722AC5B64AB49823A9BD1076C9DC7979E62EA3C230586E2A97"
      "D163CC2E000C9F54E1F43AAB8DBB1C54768DFA9E3553D94EE76107969E992325";
  std::string BHex =
      "F4D69379248D20EED58A337FB5E470B6C3ED3E3020DC88E51FED0DADA1FBAB41"
      "FD5A2E5502E2EC15373D069C309797747F08F1E7AD6453C42BF4858FFEE011AC"
      "1D09DF733B38C0D506B56D4EC8854D1DA15B69A40CB3CD6E12D90C6558C20CE2"
      "C4DB41E271008AE344FEE14BE3B33734D1D09EEEC40FE34DB81E462D608FBFBB"
      "E833EFDFACE5D7BA10DB46EAB4CFF490A99A8D65EAA4214746793286F29EE728"
      "9D7DD61B6DBD499088D80914A8E2ECD1257863C8F5821854605D1D723304DA25"
      "6F66C33CF4A87FE87A27E9CAC7B6A74CE6381587DDAB37FD3B8B70CE8B191B66"
      "F4ED27C8356CD02C6DC269C0651DB09EE07CE22064002DD624AFADAFF5393AC0"
      "422FABE39B1928B0B299B35311FDB46EE35C7E9FAC2467469A61705275B06D36"
      "FC588007F077B674126A56228C7B836271531293FBAE7FAA9F08E852F67C65EA"
      "2C598A9D7090BA64FE89A3364F87FE7B27BBED1862A01A42A348CD64AFEE58CC"
      "CA02B0764B813608C0A98DC9F815294D26746DF7DC28B79C6EABF08017406C06";
  std::string hashName = "SHA-384";
  std::string uHex = MyCryptoLibrary::SecureRemotePassword::calculateHashConcat(
      hashName, MessageExtractionFacility::hexToPlaintext(AHex),
      MessageExtractionFacility::hexToPlaintext(BHex));
  std::string expectedUHex =
      "0314B21EC992117D9C5F683036DD2F475EC67FE8E645534598B728CB32B4CB5A"
      "0140F855718AFE6C1D03A44E2B5639EC";
  EXPECT_EQ(uHex.length(), SHA384_DIGEST_LENGTH * 2);
  EXPECT_EQ(uHex, expectedUHex);
}

/**
 * @test Test the correctness of the calculation of the u = H(A | B)
 * parameter with SHA-512.
 * @brief Verifies that the scrambling parameter u, computed from known A and B
 * values using SHA-512, matches the expected reference value and has the
 * correct length.
 */
TEST_F(SessionDataTest, calculateHashConcatWithSHA512_ShouldMatchReference) {
  std::string AHex =
      "F6FDBCA9750B211E9A12DE1D60E54C7942C65D1D30826E552824E10A0777FEA1"
      "B38EE8CE5F2AC5D3BE76886D3F630EF44584382E8C303D8249420D08586B52F0"
      "81D10B0D9C4187D9CE7153E5E3190B309E7255296BDD9E4166A515C48848BF6A"
      "0F18C8C711D75429628D0A209FC603A808683D526B651F0C43F82268C203F054"
      "3ED36219F7B4534F445B7025DB6799E8EA3290682EC59DB2872EC9455BCA3B31"
      "B6EF6C552E7CBC384270A87383AB60CA99CD72889E0F64B00DD01E00E4F4192A"
      "6DBCB55ADF0C2523F177F964B4DA78AA5D022BCDEF265888C446730B19CED207"
      "3C7123FE53FF0893A486C01B4B9B1433F7A8A7689C1A4A7E99AF13B4A9248523"
      "B815BAD5D14BC94C7A05114540D9F75DCDA5BB468BF2D2FDE33D5D6634BDA360"
      "69A7CA3690BBEF1CC5BF22D41A9A9785EA962BE8C2933E07B53709C1D58D1E48"
      "6B472BEF3F8FA4722AC5B64AB49823A9BD1076C9DC7979E62EA3C230586E2A97"
      "D163CC2E000C9F54E1F43AAB8DBB1C54768DFA9E3553D94EE76107969E992325";
  std::string BHex =
      "F4D69379248D20EED58A337FB5E470B6C3ED3E3020DC88E51FED0DADA1FBAB41"
      "FD5A2E5502E2EC15373D069C309797747F08F1E7AD6453C42BF4858FFEE011AC"
      "1D09DF733B38C0D506B56D4EC8854D1DA15B69A40CB3CD6E12D90C6558C20CE2"
      "C4DB41E271008AE344FEE14BE3B33734D1D09EEEC40FE34DB81E462D608FBFBB"
      "E833EFDFACE5D7BA10DB46EAB4CFF490A99A8D65EAA4214746793286F29EE728"
      "9D7DD61B6DBD499088D80914A8E2ECD1257863C8F5821854605D1D723304DA25"
      "6F66C33CF4A87FE87A27E9CAC7B6A74CE6381587DDAB37FD3B8B70CE8B191B66"
      "F4ED27C8356CD02C6DC269C0651DB09EE07CE22064002DD624AFADAFF5393AC0"
      "422FABE39B1928B0B299B35311FDB46EE35C7E9FAC2467469A61705275B06D36"
      "FC588007F077B674126A56228C7B836271531293FBAE7FAA9F08E852F67C65EA"
      "2C598A9D7090BA64FE89A3364F87FE7B27BBED1862A01A42A348CD64AFEE58CC"
      "CA02B0764B813608C0A98DC9F815294D26746DF7DC28B79C6EABF08017406C06";
  std::string hashName = "SHA-512";
  std::string uHex = MyCryptoLibrary::SecureRemotePassword::calculateHashConcat(
      hashName, MessageExtractionFacility::hexToPlaintext(AHex),
      MessageExtractionFacility::hexToPlaintext(BHex));
  std::string expectedUHex =
      "AB6BDCAAC999E71946DA5047698DD4EAA2146D8097D03628E394880D6D21672D"
      "C12EEEC2BD18C4050E6D725C3FAC7D86CA10A79F3A08E277A872B521C4742CDF";
  EXPECT_EQ(uHex.length(), SHA512_DIGEST_LENGTH * 2);
  EXPECT_EQ(uHex, expectedUHex);
}

/**
 * @test Test that during the u calculation, it throws an exception for
 * an unknown hash name.
 * @brief Verifies that the calculateHashConcat method throws
 * std::runtime_error when an unsupported hash algorithm is provided.
 */
TEST_F(SessionDataTest,
       calculateHashConcat_WithUnknownHash_ShouldThrowRuntimeError) {
  std::string AHex =
      "F6FDBCA9750B211E9A12DE1D60E54C7942C65D1D30826E552824E10A0777FEA1"
      "B38EE8CE5F2AC5D3BE76886D3F630EF44584382E8C303D8249420D08586B52F0"
      "81D10B0D9C4187D9CE7153E5E3190B309E7255296BDD9E4166A515C48848BF6A"
      "0F18C8C711D75429628D0A209FC603A808683D526B651F0C43F82268C203F054"
      "3ED36219F7B4534F445B7025DB6799E8EA3290682EC59DB2872EC9455BCA3B31"
      "B6EF6C552E7CBC384270A87383AB60CA99CD72889E0F64B00DD01E00E4F4192A"
      "6DBCB55ADF0C2523F177F964B4DA78AA5D022BCDEF265888C446730B19CED207"
      "3C7123FE53FF0893A486C01B4B9B1433F7A8A7689C1A4A7E99AF13B4A9248523"
      "B815BAD5D14BC94C7A05114540D9F75DCDA5BB468BF2D2FDE33D5D6634BDA360"
      "69A7CA3690BBEF1CC5BF22D41A9A9785EA962BE8C2933E07B53709C1D58D1E48"
      "6B472BEF3F8FA4722AC5B64AB49823A9BD1076C9DC7979E62EA3C230586E2A97"
      "D163CC2E000C9F54E1F43AAB8DBB1C54768DFA9E3553D94EE76107969E992325";
  std::string BHex =
      "F4D69379248D20EED58A337FB5E470B6C3ED3E3020DC88E51FED0DADA1FBAB41"
      "FD5A2E5502E2EC15373D069C309797747F08F1E7AD6453C42BF4858FFEE011AC"
      "1D09DF733B38C0D506B56D4EC8854D1DA15B69A40CB3CD6E12D90C6558C20CE2"
      "C4DB41E271008AE344FEE14BE3B33734D1D09EEEC40FE34DB81E462D608FBFBB"
      "E833EFDFACE5D7BA10DB46EAB4CFF490A99A8D65EAA4214746793286F29EE728"
      "9D7DD61B6DBD499088D80914A8E2ECD1257863C8F5821854605D1D723304DA25"
      "6F66C33CF4A87FE87A27E9CAC7B6A74CE6381587DDAB37FD3B8B70CE8B191B66"
      "F4ED27C8356CD02C6DC269C0651DB09EE07CE22064002DD624AFADAFF5393AC0"
      "422FABE39B1928B0B299B35311FDB46EE35C7E9FAC2467469A61705275B06D36"
      "FC588007F077B674126A56228C7B836271531293FBAE7FAA9F08E852F67C65EA"
      "2C598A9D7090BA64FE89A3364F87FE7B27BBED1862A01A42A348CD64AFEE58CC"
      "CA02B0764B813608C0A98DC9F815294D26746DF7DC28B79C6EABF08017406C06";
  std::string unknownHash = "SHA-999";
  try {
    MyCryptoLibrary::SecureRemotePassword::calculateHashConcat(
        unknownHash, MessageExtractionFacility::hexToPlaintext(AHex),
        MessageExtractionFacility::hexToPlaintext(BHex));
  } catch (const std::runtime_error &e) {
    EXPECT_THAT(std::string(e.what()),
                ::testing::EndsWith("hash algorithm not recognized."));
  }
}

/**
 * @test Test the correctness of the calculation of the x parameter with
 * SHA-256.
 * @brief Verifies that the private key parameter x, computed as x = H(salt |
 * password) using SHA-256, matches the expected reference value for known input
 * values. This ensures the implementation of x generation is correct and
 * compatible with other SRP implementations.
 */
TEST_F(SessionDataTest, CalculateXWithSHA256_ShouldMatchReference) {
  const std::string hash = "SHA-256";
  const std::string salt =
      "3F455AE2504D25D0E5A24E363358CD58A3E41EB18AD066FEB81A7A1E82369DED";
  const std::string password = "correct horse battery staple";
  const std::string expectedX =
      "C7B1D9ACBB0A27CAFB9BD497B107AC4A9692F5830DC4EF5B66EFEB1D5D1DA62B";
  const std::string x =
      MyCryptoLibrary::SecureRemotePassword::calculateX(hash, password, salt);
  EXPECT_EQ(x, expectedX);
}

/**
 * @test Test the correctness of the calculation of the x parameter with
 * SHA-384.
 * @brief Verifies that the private key parameter x, computed as x = H(salt |
 * password) using SHA-384, matches the expected reference value for known input
 * values. This ensures the implementation of x generation is correct and
 * compatible with other SRP implementations.
 */
TEST_F(SessionDataTest, CalculateXWithSHA384_ShouldMatchReference) {
  const std::string hash = "SHA-384";
  const std::string salt = "BFB160DEA15A3E9C974E1797AA02F8B1F0FBE6D97AA18E40577"
                           "C07A9E2F40BB02C8F612B42BADBCBE37691B9A2382B30";
  const std::string password = "correct horse battery staple";
  const std::string expectedX =
      "BAA9E5AACA4BCDE30DCA7BF067150107B50985BC4B8AF806A32D4ECC44A0A8DE7EFCFDE4"
      "0F08D999A648BA97B40A2B44";
  const std::string x =
      MyCryptoLibrary::SecureRemotePassword::calculateX(hash, password, salt);
  EXPECT_EQ(x, expectedX);
}

/**
 * @test Test the correctness of the calculation of the x parameter with
 * SHA-512.
 * @brief Verifies that the private key parameter x, computed as x = H(salt |
 * password) using SHA-512, matches the expected reference value for known input
 * values. This ensures the implementation of x generation is correct and
 * compatible with other SRP implementations.
 */
TEST_F(SessionDataTest, CalculateXWithSHA512_ShouldMatchReference) {
  const std::string hash = "SHA-512";
  const std::string salt =
      "6B479DEBFE96BB93AC51E60F534536E4E493549EE1DA41A145E415612FFBA766A2CEAF2B"
      "FB2DAF34585EF383E860EBD6C44627FAE2B88341F9BDA494A8B55D62";
  const std::string password = "correct horse battery staple";
  const std::string expectedX =
      "9DC4BEE24F50EB07947529E5E321604FC631034FE84A57345A7A0954067CFF3BC4B8DB"
      "87C8132C1E49E7998956366461F5E9A3AAD5E4567D70F729BFD43FA459";
  const std::string x =
      MyCryptoLibrary::SecureRemotePassword::calculateX(hash, password, salt);
  EXPECT_EQ(x, expectedX);
}

/**
 * @test Test the correctness of the SRP S parameter calculation for group
 * ID 1.
 * @brief Verifies that the client side S calculation matches the expected
 * reference value.
 */
TEST_F(SessionDataTest, CalculateSGroup1_ShouldMatchReference) {
  const unsigned int groupId{1};
  const std::string kHex =
      MessageExtractionFacility::BIGNUMToHex(_kMap.at(groupId).get());
  const unsigned int g = _srpParametersMap.at(groupId)._g;
  const std::string NHex = _srpParametersMap.at(groupId)._nHex;
  const std::string S{MyCryptoLibrary::SecureRemotePassword::calculateS(
      _BHex, kHex, g, _xHex, _aHex, _uHex, NHex)};
  const std::string expectedS =
      "4398E45A6D27D7BD611C581328A37B1E368C56BE846B5CD64DE83B6588B69F0A99"
      "9CDF7E886F18E520AFD53BE717E2DBAA364B61136E3B2884EE472F930577F866EC"
      "DE9044E3B0F583A3BDC3E5044D87FA6427B79F71A9A2E670B9D70069FC39817174"
      "14F845B49D88EE96D2537D38069255D78EF8D336AF148BDDFD6E7FA818";
  EXPECT_EQ(S, expectedS);
}

/**
 * @test Test the correctness of the SRP S parameter calculation for group
 * ID 2.
 * @brief Verifies that the client side S calculation matches the expected
 * reference value.
 */
TEST_F(SessionDataTest, CalculateSGroup2_ShouldMatchReference) {
  const unsigned int groupId{2};
  const std::string kHex =
      MessageExtractionFacility::BIGNUMToHex(_kMap.at(groupId).get());
  const unsigned int g = _srpParametersMap.at(groupId)._g;
  const std::string NHex = _srpParametersMap.at(groupId)._nHex;
  const std::string S{MyCryptoLibrary::SecureRemotePassword::calculateS(
      _BHex, kHex, g, _xHex, _aHex, _uHex, NHex)};
  const std::string expectedS =
      "716013AAB9CCA511E6387655A9A5B24F672C62BA6CE3477D63C23997A055ACEA062A"
      "15F2998A909503247906C385BB7C36913C0F2F6CF8C003FC0EB56CD8BD15C311E174"
      "712706C74BB73AF59511061175ED6C328C46D386A906C178A595E11F1ABFA8C5D673"
      "7480D0B507DD31985BD9108C819381D167D7F5D973D57DCAA876E631578B731DD604"
      "70C3302329D5823137A56C9C09A63CAF9D55B3AA92FC54EE888A30BC0296A62A061D"
      "3DB5164A72A684EDE20505CD41D888F0C34C669DC022";
  EXPECT_EQ(S, expectedS);
}

/**
 * @test Test the correctness of the SRP S parameter calculation for group
 * ID 3.
 * @brief Verifies that the client side S calculation matches the expected
 * reference value.
 */
TEST_F(SessionDataTest, CalculateSGroup3_ShouldMatchReference) {
  const unsigned int groupId{3};
  const std::string kHex =
      MessageExtractionFacility::BIGNUMToHex(_kMap.at(groupId).get());
  const unsigned int g = _srpParametersMap.at(groupId)._g;
  const std::string NHex = _srpParametersMap.at(groupId)._nHex;
  const std::string S{MyCryptoLibrary::SecureRemotePassword::calculateS(
      _BHex, kHex, g, _xHex, _aHex, _uHex, NHex)};
  const std::string expectedS =
      "3B9DC69549A728745A930D0C6B1BF8E77B46BCDE5214E511DD8F409256AD228D25E1"
      "E5F24237C9FC5A305D0ABA39C4743D536AACA8DA981432A2B1BFD4E3AD05B2F4EEB9"
      "75E31BEE3822A1DBCFBBFA2177B7B5C9DE33E755E77D0A57F11A51BE32342AD85B36"
      "DD869A9ED7D5696F0275E101DF673C5C36A9A8490F9AF272A29FBB3825C395A3AA93"
      "D9E5F9CC8F692C1C4A71CDAEC99E723BED4A4FD7D4908AA0D58A0D521BD2337FB943"
      "0B89B396EDAB2094F519555AAA15BE86E5C9E4F571F7C30231B99AEDD77DC985B83D"
      "126318C9D0BFA4BC9861DDF27C74B15EA597C3D750DD46F9F9D927810313065CD40C"
      "258B5378DF32CFA1D0358E6FF764A01DA9AE";
  EXPECT_EQ(S, expectedS);
}

/**
 * @test Test the correctness of the SRP S parameter calculation for group
 * ID 4.
 * @brief Verifies that the client side S calculation matches the expected
 * reference value.
 */
TEST_F(SessionDataTest, CalculateSGroup4_ShouldMatchReference) {
  const unsigned int groupId{4};
  const std::string kHex =
      MessageExtractionFacility::BIGNUMToHex(_kMap.at(groupId).get());
  const unsigned int g = _srpParametersMap.at(groupId)._g;
  const std::string NHex = _srpParametersMap.at(groupId)._nHex;
  const std::string S{MyCryptoLibrary::SecureRemotePassword::calculateS(
      _BHex, kHex, g, _xHex, _aHex, _uHex, NHex)};
  const std::string expectedS =
      "B736BEADDFB3E1DF75ADE7E4876C4E59B0513257809BBAB03729C91570B855136488"
      "CBF671F1A5C2D5084FC8EED574EF27D8A9682FAA8416B0BF83F8548D5AC7D422CE18"
      "CCDB2B45B136F6A993FA98E2EE8A5CA606FBA8EF289346D1ABD4F5E2F597465E61B2"
      "C3E143A16911546315099819CE8CDE045EB02ED1B15FA918E3F6ACB45C9333C28802"
      "A83735C0416D9A753FB0C533ABDE8183F7FF3ECD619BA5490CE18A21D4CA2BC887BE"
      "2EEF84546E9CF3A8A62E0E71E7B3F3B12AFF819BC6932C1D49EEEEC5027B4C41959C"
      "2773B1025277697C4647C0B4F767AC26FAAD5E86207DE78845BD22C889ED46E335AA"
      "B3874A96CC5C670005EE82E8024B6E794B2BCF3BF80F26788E5354D7C7A84DD708C1"
      "B725FFDFB1E0D18912B976B440239F556C70970F9CC3FFC745EC995BC2B031552B51"
      "C3E566C8C882D9F2A28056728088689F4DB675DC91AA65AB201D9A2CE88D897F4483"
      "E83BDEC2A639AEB8261D0347D1C08EFCA315873A9E5E2FD6FEEA70C5BB7900D67770"
      "9196BF8BF85B63AE2C05";
  EXPECT_EQ(S, expectedS);
}

/**
 * @test Test the correctness of the SRP S parameter calculation for group
 * ID 5.
 * @brief Verifies that the client side S calculation matches the expected
 * reference value.
 */
TEST_F(SessionDataTest, CalculateSGroup5_ShouldMatchReference) {
  const unsigned int groupId{5};
  const std::string kHex =
      MessageExtractionFacility::BIGNUMToHex(_kMap.at(groupId).get());
  const unsigned int g = _srpParametersMap.at(groupId)._g;
  const std::string NHex = _srpParametersMap.at(groupId)._nHex;
  const std::string S{MyCryptoLibrary::SecureRemotePassword::calculateS(
      _BHex, kHex, g, _xHex, _aHex, _uHex, NHex)};
  const std::string expectedS =
      "3C33133F89EE37B39353281B41C48AFF0219BFE339842E16A1D715DB57551A2B505"
      "5EA486C865A6B597726289BD36E8109A66BCADCF5474927463CEF8FB6D595F4E598"
      "E3ED548AB916939D85DAEAC5497E106D8AC4B422B65E799C002228E03A26A8A7CEC"
      "B1023B27E9EB2C12E6C8A56260BFE464992772C34C3B81B6C836E5301F8AD52315A"
      "F2808179E3BA2A9786F0382755F706CC4103E36F4E07982C5E94E19BFCC180BEB05"
      "EDAF1748F4816994ADF3BA90ECB615E363804CD2EA58A13A8C0F6E2CF16E0256C01"
      "100CACCA16A36ABDC7EC5BAC38C60FAF4C99E7CA53CC16C0E69964DCBF749A06940"
      "7237C10AE363CCA3553248FB85298E4CDEF10CB7340268B3B4032276BE917F66A61"
      "26723D716C4D2DD82B7D5504840F32CB54EE474E75B9CBDE5457862D5BBE3D83A5C"
      "60B9F333C32515EF7C6F1E762EC0317D2ECD15BF6FCEE345C694F97FF8F6BEFDAE2"
      "7237DD59B0C3795C135B155E385C338B3D32E5E2C8282BD5ED70043D29AC220E65D"
      "6E379F8B9F2A92AFD75A5BA0643781313D904C2E8338E6EFC30AAC0800A68DC21CA"
      "588671F49228FCB2B6BDA13AF2150D700ACBF43AA029FB79B333977A24403E216E3"
      "908C40046DC21EEF9F1A5AEA5A505EC387F957F313B5D98B1FB086481E4BC389F61"
      "CFD4AEBD95195DBA78AF8713137F31F6973E479112ADF6DF701B4F366EFAD68A27D"
      "5752183B29A4974EF80";
  EXPECT_EQ(S, expectedS);
}

/**
 * @test Test the correctness of the SRP S parameter calculation for group
 * ID 6.
 * @brief Verifies that the client side S calculation matches the expected
 * reference value.
 */
TEST_F(SessionDataTest, CalculateSGroup6_ShouldMatchReference) {
  const unsigned int groupId{6};
  const std::string kHex =
      MessageExtractionFacility::BIGNUMToHex(_kMap.at(groupId).get());
  const unsigned int g = _srpParametersMap.at(groupId)._g;
  const std::string NHex = _srpParametersMap.at(groupId)._nHex;
  const std::string S{MyCryptoLibrary::SecureRemotePassword::calculateS(
      _BHex, kHex, g, _xHex, _aHex, _uHex, NHex)};
  const std::string expectedS =
      "EB8BEB81C71ED17AE4EBB1EB5525CD53E8A1135FA1A4649B1C47ABC437FCA640099"
      "6DFC3DEDB4AB40AD280DDEEEFA612F182A398A0CDE560E06CED1723F2793E955DC3"
      "741E0A7023F40EE23DD3AF91CB89FCB2077BE33AF8B4F6BD16F464EF5F37761EB02"
      "0C3E41A80561F3D5072211A04C3FA786841C3A3DA086C45C33B6A9FEF9FD47BDCCE"
      "8E979D26239CB0CB99C8F9992C684DA8DF06EB48B980FF26C7114D036C9D51F6F9F"
      "1B54F6EEE5246D7525375E7702E6D1BDF7DE45EA8537C647B27DDD10115CECC91BC"
      "647223D298E29C5D76C2AEEACB9E074F2786F517D5B33020CFC2CD5977DC2BBF744"
      "B19314BBC58DDA0E3EE1F92AC06C04AC382DC0B6722CCFB2E0A1931E86713F9FAF0"
      "EAF27A87FA121E96007366DBADBDF4B7F6D386EBACACAF9E9BA2474D4F8E24D862F"
      "6F4658C9CEFCD416335EBBACEE2828AE96ED30586862F4927B749CC7E200656E9DE"
      "F5C857F092DD58E967F58B317B5B6533804C531EB1C190358DB47539267E54A3E19"
      "561AA7F2799164CF971AA25C69AFCB1BA2D54382BC982261A69091A5D9BBED71649"
      "27FC1775E4F05AC4F45676CF26FB84B975DC92C2A72F38270EB74C3A17F9850E1AD"
      "AE7B97A9A8104ECAB8F2A2B4080815082C87B1967C04A5795FF7079C4D2A6CF7F27"
      "B6D8EE9AE81E22139731A8E8020144B310C89F943F4C292BBE2F4D53BF2245E3705"
      "90FBB10232F43331217D93C1E01657A941B8E582B5803C6AF9F019C655CCA0DD29D"
      "F832673460151D956985CFB81DB98F5A6AC030DCA216B4045F14E2AA113A54C0D62"
      "C36F7B3920E85971103225F22FADA3CEB96E94CA0A0AB5A6A987BC55C72704F0CB0"
      "130808B152F5F23582185CB7C88DB331C93454C0A005643AC1D92A4213C6EED3B58"
      "992A204EDC5BBCD9B492928F5E0BFDEC7AC2BFF2276CD48D90798142F58B1EED2B4"
      "72C71160E4AA006ADFE358186D6D43226D0A9D99002281A417826C3842868A6DBF2"
      "C0E397AAF08A8C47E3EC63B44F89681F0F204DAE8A14930F8F2380C3CCF2007BDAF"
      "98F7B5A0E3E1EFC9CEEBA527CB0FE605448648C2C9638A4BAC80ED1EFB2F28";
  EXPECT_EQ(S, expectedS);
}

/**
 * @test Test the correctness of the SRP S parameter calculation for group
 * ID 7.
 * @brief Verifies that the client side S calculation matches the expected
 * reference value.
 */
TEST_F(SessionDataTest, CalculateSGroup7_ShouldMatchReference) {
  const unsigned int groupId{7};
  const std::string kHex =
      MessageExtractionFacility::BIGNUMToHex(_kMap.at(groupId).get());
  const unsigned int g = _srpParametersMap.at(groupId)._g;
  const std::string NHex = _srpParametersMap.at(groupId)._nHex;
  const std::string S{MyCryptoLibrary::SecureRemotePassword::calculateS(
      _BHex, kHex, g, _xHex, _aHex, _uHex, NHex)};
  const std::string expectedS =
      "059C7926144D7BDC2BBC6F2FB1C007AEF852B00B4320496A7D542F0BE68A328424E9"
      "6DDE623A2A4B6F7319285E0FD74F46830050AE91D0D0A72481F84E0411A6283AE6BF"
      "862B5849AA031C0D807514C743FBBB8057EA9DD2A24DE26EA8A23484B297AB9EFDB8"
      "8E7077420FF7B1D0A63D8A1F45E2824831A0FEA2C4F4BC2B5FC2C0AD6D986DE6BCB7"
      "59FD49B4109AA832A19A03DF03E79C7351E9CA3C9EBBC5DAAC28FC883A285E3F6AEC"
      "A0B4624780D030D82EDD4B790EFE1F87B6DEA140F34EAC5EF7F8B6849B10B1D9FBB6"
      "D771F7FED235FE3FF0C1D159A374426BD3A83492ED597BC050BA03BFFE2AF0B680C9"
      "AC6DC0785441DB2ECC795457A2D300A7D662DA62510907D4360BB5DE103CF3A3595F"
      "5325653D21293B62C8F3464C7742414AFB463669DA451C4B9412C782AD665CA4EE9D"
      "FB003CBEF2AB5A2E341A75DF0D5F5D957FD1F74E9D40469C1D000B967F23953B06C7"
      "EC1B1F907DE8933899004E2AFCF1B5297FCE69484B8D4657A021EE964CC6BC8F65AB"
      "2088302F8B0768FD884FD8E89C4F0451C7FF957E4DEB3799BADD546FD5295DAD1D88"
      "C1708CC42F1335752EDC427FA548F37F27AB8D98DB2E45DBB2B3CA0545C596B4E334"
      "B099A5B819695BAF6C3E1BA11F51D2493ECA2A086F11ABB99C77E1C51EC2322FAA17"
      "E9C6E46309064164725C033649EED64C886FCBFDAB7DAF5F77A243388F004C42288D"
      "73E7F4D39F57C92880314B7E749F25A3CCF9C35C0B59299F055524C2D326F434F251"
      "A16CB72E7BDA6A95B848CC2ED5CEEE40A17569FB2398E77D34429FAD0A3BC608A054"
      "93E6B5EA17FC65D774F28E4C4A5A97A7378CCF1FBFAD745EEDCC7D20C6DB1A7C87B6"
      "85AB6E8C3A983174B51D6D42E3E0E181DEA859EC37BFB2DE9AFC0261FFAB567CA8A9"
      "874788523B0F6FE02BF6FA2CB514BC5DC7514D95C1FACD18A832CF86AB44E9054D27"
      "E5A7A074DFDBDF4A41F845EDB28A9E2F57DD95468D2514813EA463CCCB7CCD426F09"
      "0150EB1D191EA7231DD7A6C08ED206B98F577906C8D27AAA599D83823115E14CAA74"
      "9DA92A32D3510B6B4117D341C5D375125949FF74479FEBA4FCF104B80F1EFAA84E00"
      "D80DC5890FA6CBDD2D70787B2122914C27371F8BC09E763879F53462A8440C4EAF8B"
      "E414DE7F6DE16B2D439CC670F9EFC0AF97876E0B0BC6518D848A879267E915EA6283"
      "C77AD2C89E0B0DF6DF08AFD122E21EF4900A0FBF07C0B97AD4519F087E8708BB483F"
      "9C1824209D5982586E7314FBA500FAAD44F6270D93F262381F6CE767C2619C2A4AC2"
      "CDB56487FC643841B14DF0A76A1CC2A385032B4894A14E61F81439BCF56A837D190B"
      "74B0581786FB90DF363517B295F3C39EB190EC75D007D1260D785F5C6B6C037ACF0B"
      "8E898786361062D21DB2D1B3E656BA982E14AD2C66D51D4C889BC2C507CE2CFA6B9D"
      "9CDCFCBC";
  EXPECT_EQ(S, expectedS);
}
