#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "../include/MessageExtractionFacility.hpp"
#include "../include/SessionData.hpp"

/**
 * @test Test the correctness of the construction of the structure of Session
 * Data.
 * @brief Test the correctness of the construction of the structure of Session
 * Data, should match the expected values.
 */
TEST(SessionDataTest,
     SessionData_WithValidInputParameters_ShouldMatchReference) {
  const unsigned int groupId{5};
  const std::string salt{
      "8F03FE9E9F8988BE043F4D17489E7EF9BD2FA3E1B1ADA0A286F16F8E9AD4BB06"};
  const std::string hash{"SHA-256"};
  const bool debugFlag{false};
  SessionData session(groupId, salt, hash, debugFlag);
  EXPECT_EQ(session._groupId, groupId);
  EXPECT_EQ(session._salt, salt);
  EXPECT_EQ(session._hash, hash);
}

/**
 * @test Test that the constructor of SessionData throws an error when
 * an invalid group ID is given as input parameter.
 * @brief Test that the constructor of SessionData throws an error when
 * an invalid group ID is given as input parameter. The error message
 * should match the expected value.
 */
TEST(SessionDataTest, SessionData_WithInvalidGroupId_ShouldThrowAnError) {
  const unsigned int groupId{0};
  const std::string salt{
      "8F03FE9E9F8988BE043F4D17489E7EF9BD2FA3E1B1ADA0A286F16F8E9AD4BB06"};
  const std::string hash{"SHA-256"};
  const bool debugFlag{false};
  try {
    SessionData session(groupId, salt, hash, debugFlag);
  } catch (const std::runtime_error &e) {
    EXPECT_THAT(std::string(e.what()),
                ::testing::EndsWith("Invalid input parameters given."));
  }
}

/**
 * @test Test that the constructor of SessionData throws an error when
 * an invalid salt is given as input parameter.
 * @brief Test that the constructor of SessionData throws an error when
 * an invalid salt is given as input parameter. The error message
 * should match the expected value.
 */
TEST(SessionDataTest, SessionData_WithInvalidSalt_ShouldThrowAnError) {
  const unsigned int groupId{5};
  const std::string salt{""};
  const std::string hash{"SHA-256"};
  const bool debugFlag{false};
  try {
    SessionData session(groupId, salt, hash, debugFlag);
  } catch (const std::runtime_error &e) {
    EXPECT_THAT(std::string(e.what()),
                ::testing::EndsWith("Invalid input parameters given."));
  }
}

/**
 * @test Test that the constructor of SessionData throws an error when
 * an invalid hash is given as input parameter.
 * @brief Test that the constructor of SessionData throws an error when
 * an invalid hash is given as input parameter. The error message
 * should match the expected value.
 */
TEST(SessionDataTest, SessionData_WithInvalidHash_ShouldThrowAnError) {
  const unsigned int groupId{5};
  const std::string salt{
      "8F03FE9E9F8988BE043F4D17489E7EF9BD2FA3E1B1ADA0A286F16F8E9AD4BB06"};
  const std::string hash{""};
  const bool debugFlag{false};
  try {
    SessionData session(groupId, salt, hash, debugFlag);
  } catch (const std::runtime_error &e) {
    EXPECT_THAT(std::string(e.what()),
                ::testing::EndsWith("Invalid input parameters given."));
  }
}

/**
 * @test Test that the k multiplier map returned from the session data
 * matches the reference.
 * @brief Test that the k multiplier map returned from the session data
 * matches the reference. The k values are stored by group ID.
 */
TEST(SessionDataTest, SessionData_GetKMultiplierMap_ShouldMatchReference) {
  const unsigned int groupId{5};
  const std::string salt{
      "8F03FE9E9F8988BE043F4D17489E7EF9BD2FA3E1B1ADA0A286F16F8E9AD4BB06"};
  const std::string hash{"SHA-256"};
  const bool debugFlag{false};
  SessionData session(groupId, salt, hash, debugFlag);
  const std::map<unsigned int, MessageExtractionFacility::UniqueBIGNUM> &kMap =
      session._secureRemotePassword->getKMap();
  const unsigned int groupsSize{7};
  EXPECT_EQ(kMap.size(), groupsSize);
  EXPECT_EQ(MessageExtractionFacility::BIGNUMToHex(kMap.at(1).get()),
            "1A1A4C140CDE70AE360C1EC33A33155B1022DF951732A476A862EB3AB8206A5C");
  EXPECT_EQ(MessageExtractionFacility::BIGNUMToHex(kMap.at(2).get()),
            "B2286EEE1033FE2BDC950CBF0ABB6FB56670E2B4D5BDA4CB203A9A96D018625D");
  EXPECT_EQ(MessageExtractionFacility::BIGNUMToHex(kMap.at(3).get()),
            "05B9E8EF059C6B32EA59FC1D322D37F04AA30BAE5AA9003B8321E21DDB04E300");
  EXPECT_EQ(MessageExtractionFacility::BIGNUMToHex(kMap.at(4).get()),
            "081F4874FA543A371B49A670402FDA59ECFAB53A1B850FC42E1C357CC846111E");
  EXPECT_EQ(MessageExtractionFacility::BIGNUMToHex(kMap.at(5).get()),
            "13ED8E2B1E3F847DA7D4BE9DDE56C9AD9AA50EE67CDC948E4053A171EBB384DF5D"
            "6B2047D295C857C61B9504CAF00907");
  EXPECT_EQ(MessageExtractionFacility::BIGNUMToHex(kMap.at(6).get()),
            "E23815ED6634AFD9F6C2EFC31B593068347B5AF87A072252A53F18019CCDB30E75"
            "1C17AD439E1A65DB22D67EF3C181CD806CDBBA608718785707156F998C4198");
  EXPECT_EQ(MessageExtractionFacility::BIGNUMToHex(kMap.at(7).get()),
            "4D52644EEB89DCEB292AEA0DC86CF8D1EE820E92B7F840F2E075004249315CE5EB"
            "61FD1FE6F8DC35E51495357EC0B4E14CAF9EF159D093BAD019514927476AC5");
}

/**
 * @test Test the correctness of the calculation of the u = H(A | B)
 * parameter with SHA-256.
 * @brief Verifies that the scrambling parameter u, computed from known A and B
 * values using SHA-256, matches the expected reference value and has the
 * correct length.
 */
TEST(SessionDataTest, calculateHashConcatWithSHA256_ShouldMatchReference) {
  std::string AHex =
      "F6FDBCA9750B211E9A12DE1D60E54C7942C65D1D30826E552824E10A0777FEA1"
      "B38EE8CE5F2AC5D3BE76886D3F630EF44584382E8C303D8249420D08586B52F0"
      "81D10B0D9C4187D9CE7153E5E3190B309E7255296BDD9E4166A515C48848BF6A"
      "0F18C8C711D75429628D0A209FC603A808683D526B651F0C43F82268C203F054"
      "3ED36219F7B4534F445B7025DB6799E8EA3290682EC59DB2872EC9455BCA3B31"
      "B6EF6C552E7CBC384270A87383AB60CA99CD72889E0F64B00DD01E00E4F4192A"
      "6DBCB55ADF0C2523F177F964B4DA78AA5D022BCDEF265888C446730B19CED207"
      "3C7123FE53FF0893A486C01B4B9B1433F7A8A7689C1A4A7E99AF13B4A9248523"
      "B815BAD5D14BC94C7A05114540D9F75DCDA5BB468BF2D2FDE33D5D6634BDA360"
      "69A7CA3690BBEF1CC5BF22D41A9A9785EA962BE8C2933E07B53709C1D58D1E48"
      "6B472BEF3F8FA4722AC5B64AB49823A9BD1076C9DC7979E62EA3C230586E2A97"
      "D163CC2E000C9F54E1F43AAB8DBB1C54768DFA9E3553D94EE76107969E992325";
  std::string BHex =
      "F4D69379248D20EED58A337FB5E470B6C3ED3E3020DC88E51FED0DADA1FBAB41"
      "FD5A2E5502E2EC15373D069C309797747F08F1E7AD6453C42BF4858FFEE011AC"
      "1D09DF733B38C0D506B56D4EC8854D1DA15B69A40CB3CD6E12D90C6558C20CE2"
      "C4DB41E271008AE344FEE14BE3B33734D1D09EEEC40FE34DB81E462D608FBFBB"
      "E833EFDFACE5D7BA10DB46EAB4CFF490A99A8D65EAA4214746793286F29EE728"
      "9D7DD61B6DBD499088D80914A8E2ECD1257863C8F5821854605D1D723304DA25"
      "6F66C33CF4A87FE87A27E9CAC7B6A74CE6381587DDAB37FD3B8B70CE8B191B66"
      "F4ED27C8356CD02C6DC269C0651DB09EE07CE22064002DD624AFADAFF5393AC0"
      "422FABE39B1928B0B299B35311FDB46EE35C7E9FAC2467469A61705275B06D36"
      "FC588007F077B674126A56228C7B836271531293FBAE7FAA9F08E852F67C65EA"
      "2C598A9D7090BA64FE89A3364F87FE7B27BBED1862A01A42A348CD64AFEE58CC"
      "CA02B0764B813608C0A98DC9F815294D26746DF7DC28B79C6EABF08017406C06";
  std::string hashName = "SHA-256";
  std::string uHex = MyCryptoLibrary::SecureRemotePassword::calculateHashConcat(
      hashName, MessageExtractionFacility::hexToPlaintext(AHex),
      MessageExtractionFacility::hexToPlaintext(BHex));
  std::string expectedUHex =
      "49510A0BB9F42F1068F4446E620A4DF30453369329F2A001EF33A72510AA1810";
  EXPECT_EQ(uHex.length(), SHA256_DIGEST_LENGTH * 2);
  EXPECT_EQ(uHex, expectedUHex);
}

/**
 * @test Test the correctness of the calculation of the u = H(A | B)
 * parameter with SHA-384.
 * @brief Verifies that the scrambling parameter u, computed from known A and B
 * values using SHA-384, matches the expected reference value and has the
 * correct length.
 */
TEST(SessionDataTest, calculateHashConcatWithSHA384_ShouldMatchReference) {
  std::string AHex =
      "F6FDBCA9750B211E9A12DE1D60E54C7942C65D1D30826E552824E10A0777FEA1"
      "B38EE8CE5F2AC5D3BE76886D3F630EF44584382E8C303D8249420D08586B52F0"
      "81D10B0D9C4187D9CE7153E5E3190B309E7255296BDD9E4166A515C48848BF6A"
      "0F18C8C711D75429628D0A209FC603A808683D526B651F0C43F82268C203F054"
      "3ED36219F7B4534F445B7025DB6799E8EA3290682EC59DB2872EC9455BCA3B31"
      "B6EF6C552E7CBC384270A87383AB60CA99CD72889E0F64B00DD01E00E4F4192A"
      "6DBCB55ADF0C2523F177F964B4DA78AA5D022BCDEF265888C446730B19CED207"
      "3C7123FE53FF0893A486C01B4B9B1433F7A8A7689C1A4A7E99AF13B4A9248523"
      "B815BAD5D14BC94C7A05114540D9F75DCDA5BB468BF2D2FDE33D5D6634BDA360"
      "69A7CA3690BBEF1CC5BF22D41A9A9785EA962BE8C2933E07B53709C1D58D1E48"
      "6B472BEF3F8FA4722AC5B64AB49823A9BD1076C9DC7979E62EA3C230586E2A97"
      "D163CC2E000C9F54E1F43AAB8DBB1C54768DFA9E3553D94EE76107969E992325";
  std::string BHex =
      "F4D69379248D20EED58A337FB5E470B6C3ED3E3020DC88E51FED0DADA1FBAB41"
      "FD5A2E5502E2EC15373D069C309797747F08F1E7AD6453C42BF4858FFEE011AC"
      "1D09DF733B38C0D506B56D4EC8854D1DA15B69A40CB3CD6E12D90C6558C20CE2"
      "C4DB41E271008AE344FEE14BE3B33734D1D09EEEC40FE34DB81E462D608FBFBB"
      "E833EFDFACE5D7BA10DB46EAB4CFF490A99A8D65EAA4214746793286F29EE728"
      "9D7DD61B6DBD499088D80914A8E2ECD1257863C8F5821854605D1D723304DA25"
      "6F66C33CF4A87FE87A27E9CAC7B6A74CE6381587DDAB37FD3B8B70CE8B191B66"
      "F4ED27C8356CD02C6DC269C0651DB09EE07CE22064002DD624AFADAFF5393AC0"
      "422FABE39B1928B0B299B35311FDB46EE35C7E9FAC2467469A61705275B06D36"
      "FC588007F077B674126A56228C7B836271531293FBAE7FAA9F08E852F67C65EA"
      "2C598A9D7090BA64FE89A3364F87FE7B27BBED1862A01A42A348CD64AFEE58CC"
      "CA02B0764B813608C0A98DC9F815294D26746DF7DC28B79C6EABF08017406C06";
  std::string hashName = "SHA-384";
  std::string uHex = MyCryptoLibrary::SecureRemotePassword::calculateHashConcat(
      hashName, MessageExtractionFacility::hexToPlaintext(AHex),
      MessageExtractionFacility::hexToPlaintext(BHex));
  std::string expectedUHex =
      "0314B21EC992117D9C5F683036DD2F475EC67FE8E645534598B728CB32B4CB5A"
      "0140F855718AFE6C1D03A44E2B5639EC";
  EXPECT_EQ(uHex.length(), SHA384_DIGEST_LENGTH * 2);
  EXPECT_EQ(uHex, expectedUHex);
}

/**
 * @test Test the correctness of the calculation of the u = H(A | B)
 * parameter with SHA-512.
 * @brief Verifies that the scrambling parameter u, computed from known A and B
 * values using SHA-512, matches the expected reference value and has the
 * correct length.
 */
TEST(SessionDataTest, calculateHashConcatWithSHA512_ShouldMatchReference) {
  std::string AHex =
      "F6FDBCA9750B211E9A12DE1D60E54C7942C65D1D30826E552824E10A0777FEA1"
      "B38EE8CE5F2AC5D3BE76886D3F630EF44584382E8C303D8249420D08586B52F0"
      "81D10B0D9C4187D9CE7153E5E3190B309E7255296BDD9E4166A515C48848BF6A"
      "0F18C8C711D75429628D0A209FC603A808683D526B651F0C43F82268C203F054"
      "3ED36219F7B4534F445B7025DB6799E8EA3290682EC59DB2872EC9455BCA3B31"
      "B6EF6C552E7CBC384270A87383AB60CA99CD72889E0F64B00DD01E00E4F4192A"
      "6DBCB55ADF0C2523F177F964B4DA78AA5D022BCDEF265888C446730B19CED207"
      "3C7123FE53FF0893A486C01B4B9B1433F7A8A7689C1A4A7E99AF13B4A9248523"
      "B815BAD5D14BC94C7A05114540D9F75DCDA5BB468BF2D2FDE33D5D6634BDA360"
      "69A7CA3690BBEF1CC5BF22D41A9A9785EA962BE8C2933E07B53709C1D58D1E48"
      "6B472BEF3F8FA4722AC5B64AB49823A9BD1076C9DC7979E62EA3C230586E2A97"
      "D163CC2E000C9F54E1F43AAB8DBB1C54768DFA9E3553D94EE76107969E992325";
  std::string BHex =
      "F4D69379248D20EED58A337FB5E470B6C3ED3E3020DC88E51FED0DADA1FBAB41"
      "FD5A2E5502E2EC15373D069C309797747F08F1E7AD6453C42BF4858FFEE011AC"
      "1D09DF733B38C0D506B56D4EC8854D1DA15B69A40CB3CD6E12D90C6558C20CE2"
      "C4DB41E271008AE344FEE14BE3B33734D1D09EEEC40FE34DB81E462D608FBFBB"
      "E833EFDFACE5D7BA10DB46EAB4CFF490A99A8D65EAA4214746793286F29EE728"
      "9D7DD61B6DBD499088D80914A8E2ECD1257863C8F5821854605D1D723304DA25"
      "6F66C33CF4A87FE87A27E9CAC7B6A74CE6381587DDAB37FD3B8B70CE8B191B66"
      "F4ED27C8356CD02C6DC269C0651DB09EE07CE22064002DD624AFADAFF5393AC0"
      "422FABE39B1928B0B299B35311FDB46EE35C7E9FAC2467469A61705275B06D36"
      "FC588007F077B674126A56228C7B836271531293FBAE7FAA9F08E852F67C65EA"
      "2C598A9D7090BA64FE89A3364F87FE7B27BBED1862A01A42A348CD64AFEE58CC"
      "CA02B0764B813608C0A98DC9F815294D26746DF7DC28B79C6EABF08017406C06";
  std::string hashName = "SHA-512";
  std::string uHex = MyCryptoLibrary::SecureRemotePassword::calculateHashConcat(
      hashName, MessageExtractionFacility::hexToPlaintext(AHex),
      MessageExtractionFacility::hexToPlaintext(BHex));
  std::string expectedUHex =
      "AB6BDCAAC999E71946DA5047698DD4EAA2146D8097D03628E394880D6D21672D"
      "C12EEEC2BD18C4050E6D725C3FAC7D86CA10A79F3A08E277A872B521C4742CDF";
  EXPECT_EQ(uHex.length(), SHA512_DIGEST_LENGTH * 2);
  EXPECT_EQ(uHex, expectedUHex);
}

/**
 * @test Test that during the u calculation, it throws an exception for
 * an unknown hash name.
 * @brief Verifies that the calculateHashConcat method throws
 * std::runtime_error when an unsupported hash algorithm is provided.
 */
TEST(SessionDataTest,
     calculateHashConcat_WithUnknownHash_ShouldThrowRuntimeError) {
  std::string AHex =
      "F6FDBCA9750B211E9A12DE1D60E54C7942C65D1D30826E552824E10A0777FEA1"
      "B38EE8CE5F2AC5D3BE76886D3F630EF44584382E8C303D8249420D08586B52F0"
      "81D10B0D9C4187D9CE7153E5E3190B309E7255296BDD9E4166A515C48848BF6A"
      "0F18C8C711D75429628D0A209FC603A808683D526B651F0C43F82268C203F054"
      "3ED36219F7B4534F445B7025DB6799E8EA3290682EC59DB2872EC9455BCA3B31"
      "B6EF6C552E7CBC384270A87383AB60CA99CD72889E0F64B00DD01E00E4F4192A"
      "6DBCB55ADF0C2523F177F964B4DA78AA5D022BCDEF265888C446730B19CED207"
      "3C7123FE53FF0893A486C01B4B9B1433F7A8A7689C1A4A7E99AF13B4A9248523"
      "B815BAD5D14BC94C7A05114540D9F75DCDA5BB468BF2D2FDE33D5D6634BDA360"
      "69A7CA3690BBEF1CC5BF22D41A9A9785EA962BE8C2933E07B53709C1D58D1E48"
      "6B472BEF3F8FA4722AC5B64AB49823A9BD1076C9DC7979E62EA3C230586E2A97"
      "D163CC2E000C9F54E1F43AAB8DBB1C54768DFA9E3553D94EE76107969E992325";
  std::string BHex =
      "F4D69379248D20EED58A337FB5E470B6C3ED3E3020DC88E51FED0DADA1FBAB41"
      "FD5A2E5502E2EC15373D069C309797747F08F1E7AD6453C42BF4858FFEE011AC"
      "1D09DF733B38C0D506B56D4EC8854D1DA15B69A40CB3CD6E12D90C6558C20CE2"
      "C4DB41E271008AE344FEE14BE3B33734D1D09EEEC40FE34DB81E462D608FBFBB"
      "E833EFDFACE5D7BA10DB46EAB4CFF490A99A8D65EAA4214746793286F29EE728"
      "9D7DD61B6DBD499088D80914A8E2ECD1257863C8F5821854605D1D723304DA25"
      "6F66C33CF4A87FE87A27E9CAC7B6A74CE6381587DDAB37FD3B8B70CE8B191B66"
      "F4ED27C8356CD02C6DC269C0651DB09EE07CE22064002DD624AFADAFF5393AC0"
      "422FABE39B1928B0B299B35311FDB46EE35C7E9FAC2467469A61705275B06D36"
      "FC588007F077B674126A56228C7B836271531293FBAE7FAA9F08E852F67C65EA"
      "2C598A9D7090BA64FE89A3364F87FE7B27BBED1862A01A42A348CD64AFEE58CC"
      "CA02B0764B813608C0A98DC9F815294D26746DF7DC28B79C6EABF08017406C06";
  std::string unknownHash = "SHA-999";
  try {
    MyCryptoLibrary::SecureRemotePassword::calculateHashConcat(
        unknownHash, MessageExtractionFacility::hexToPlaintext(AHex),
        MessageExtractionFacility::hexToPlaintext(BHex));
  } catch (const std::runtime_error &e) {
    EXPECT_THAT(std::string(e.what()),
                ::testing::EndsWith("hash algorithm not recognized."));
  }
}