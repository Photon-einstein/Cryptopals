"@startuml Secure_Remote_Password_class_diagram"

class Client {
    - _portServerProduction : int
    - _portServerTest : int
    - _clientId : const std::string
    - _debugFlag : const bool
    - _minSaltSizesMap : const std::map<std::string, unsigned int>
    - _srpParametersFilename : const std::string
    - _srpParametersMap : std::map<unsigned int, SrpParametersLoader::SrpParameters>
    - _sessionData : std::unique_ptr<SessionData>
    - _passwordSize : const unsigned int = 20
    - _serverConfirmationMessage : const std::string = "Ack"
    - _isServerFlag : bool {static}

    + Client(clientId : const std::string&, debugFlag : const bool) {explicit}
    + ~Client()
    + setProductionPort(portServerProduction : const int) : void
    + setTestPort(portServerTest : const int) : void
    + getClientId() : const std::string& {const}
    + getProductionPort() : const int {const}
    + getTestPort() : const int {const}
    + getSrpParametersFilenameLocation() : const std::string& {const}
    + registration(portServerNumber : const int, groupId : const int = 1) : const bool
    + authentication(portServerNumber : const int) : const bool
    + getIsServerFlag() : bool {static}
    + calculateX(hash : const std::string&, salt : const std::string&, password : const std::string&) : std::string {static}
    - registrationInit(portServerNumber : const int, groupId : const unsigned int) : const bool
    - registrationComplete(portServerNumber : const int, groupId : const unsigned int) : const bool
    - authenticationInit(portServerNumber : const int) : const bool
    - authenticationComplete(portServerNumber : const int) : const bool
    - printServerResponse(response : const cpr::Response&) : void {static}
}

namespace EncryptionUtility {

    class HashFn <<typedef>> {
        std::function<std::string(const std::string &)>
    }

    class EncryptionUtility {
        + generateCryptographicNonce(length : const std::size_t) : const std::string
        + sha1(input : const std::string&) : std::string
        + sha256(input : const std::string&) : std::string
        + sha384(input : const std::string&) : std::string
        + sha512(input : const std::string&) : std::string
        + getHashMap() : const std::unordered_map<std::string, HashFn>
        + getMinSaltSizes() : const std::map<std::string, unsigned int>
        + generatePassword(passwordLength : std::size_t = 16) : const std::string
        + padLeft(input : const std::vector<uint8_t>&, size : size_t) : std::vector<uint8_t>
    }

    EncryptionUtility ..> HashFn : uses

}

namespace MessageExtractionFacility {

    class UniqueBIGNUM <<typedef>> {
        std::unique_ptr<BIGNUM, BIGNUM_deleter>
    }

    class MessageExtractionFacility {
        + hexToBytes(hexStr : const std::string&) : std::vector<unsigned char>
        + toHexString(data : const std::vector<unsigned char>&) : std::string
        + hexToPlaintext(hexString : const std::string&) : std::string
        + hexToUniqueBIGNUM(hexNumber : const std::string&) : UniqueBIGNUM
        + BIGNUMToHex(bn : BIGNUM*) : std::string
        + BIGNUMToDec(bn : BIGNUM*) : std::string
        + uintToHex(value : unsigned int, width : size_t = 2) : std::string
    }

    MessageExtractionFacility ..> UniqueBIGNUM : uses

}



@enduml