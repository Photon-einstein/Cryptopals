"@startuml SRP_implementation_sequence_diagram"

box "Client Environment" #LightYellow
    participant "main (runClient1)" as Main
    participant "Client (Bob)" as Client
    participant "Client:SecureRemotePassword" as ClientSRP
    participant "Client:SessionData" as ClientSession
    participant "Client:SrpParametersLoader" as ClientSrpLoader
    participant "Client:MessageExtractionFacility" as ClientMEF
    participant "Client:EncryptionUtility" as ClientEU
end box

box "Server Environment" #LightBlue
    participant "Server (API)" as ServerAPI
    participant "Server:SecureRemotePassword" as ServerSRP
    participant "Server:SessionData" as ServerSession
    participant "Server:SrpParametersLoader" as ServerSrpLoader
    participant "Server:MessageExtractionFacility" as ServerMEF
    participant "Server:EncryptionUtility" as ServerEU
end box

activate Main

Main -> Client : Create Client("Bob", debugFlag)
activate Client

    Client -> ClientEU: getMinSaltSizes()
    activate ClientEU
        note right
            Loads the result into the _minSaltSizesMap variable
        end note
    ClientEU --> Client: A map of hash names with the minimum salt sizes, in bytes.
    deactivate ClientEU

    Client -> ClientSRP: getSrpParametersFilenameLocation()
    activate ClientSRP
        note right
            Loads the result into the _srpParametersFilename variable
        end note
    ClientSRP --> Client: Returns the SRP parameters file name location
    deactivate ClientSRP

    Client -> ClientSrpLoader : loadSrpParameters(_srpParametersFilename)
    activate ClientSrpLoader
        note right
            Loads SRP group parameters (N, g, hashName) from JSON file
        end note
    ClientSrpLoader --> Client : SRP parameters map
    deactivate ClientSrpLoader

    Client --> Main : returns Client
deactivate Client

Main -> Client : registration(client->getProductionPort(), requestedGroup)
activate Client
    Client -> Client: registrationInit(portServerNumber, groupId)
    activate Client
        Client -> Client : built "srp/register/init" message
        note right
            Client constructs JSON registration init
            with clientId and requestedGroup
        end note
        Client -> ServerAPI : HTTP POST /srp/register/init (1st msg of the registration process)
        activate ServerAPI










            ServerAPI --> Client : HTTP 201 OK 
            note right
                Server constructs JSON registration init 
                response with the fields: clientId, groupId,
                groupName, primeN, generatorG, sha and salt
            end note
        deactivate ServerAPI
        Client --> Client: registrationResult
    deactivate Client

deactivate Client

Main -> Main : Program ends
deactivate Main

@enduml