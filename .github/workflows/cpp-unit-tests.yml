name: C++ Unit Tests

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        changed_path: [] # Will be dynamically populated

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Need history to compare changes

      - name: Determine changed project paths
        id: changed-projects
        run: |
          changed_files=$(git diff --name-only HEAD~1 HEAD) # Get files changed in the last commit
          if [[ github.event_name == 'pull_request' ]]; then
            changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
          fi

          IFS=$'\n'
          changed_project_paths=()
          for file in $changed_files; do
            if [[ "$file" =~ ^cryptopals_set_[0-9]+_problem_[0-9]+/ ]]; then
              changed_path="${file%%/*}" # Extract the top-level project folder
              if [[ ! " ${changed_project_paths[@]} " =~ " ${changed_path} " ]]; then
                changed_project_paths+=("$changed_path")
              fi
            fi
          done
          if [[ ${#changed_project_paths[@]} -gt 0 ]]; then
            echo "CHANGED_PROJECTS=$(jq -n --argjson paths \"${changed_project_paths[@]}\" '$ARGS.paths')" >> $GITHUB_OUTPUT
          else
            echo "CHANGED_PROJECTS='[]'" >> $GITHUB_OUTPUT
          fi

      - name: Update git submodules
        run: git submodule update --init --recursive

      - name: Set up environment variable
        run: |
          echo "AES_256_KEY_SERVER_SET_4_PROBLEM_28=${{ secrets.AES_256_KEY_SERVER_SET_4_PROBLEM_28 }}" >> $GITHUB_ENV
          echo "KEY_SERVER_SET_4_PROBLEM_29=${{ secrets.KEY_SERVER_SET_4_PROBLEM_29 }}" >> $GITHUB_ENV
          echo "KEY_SERVER_SET_4_PROBLEM_30=${{ secrets.KEY_SERVER_SET_4_PROBLEM_30 }}" >> $GITHUB_ENV
          echo "KEY_SERVER_SET_4_PROBLEM_31=${{ secrets.KEY_SERVER_SET_4_PROBLEM_31 }}" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake g++ libgtest-dev libssl-dev nlohmann-json3-dev valgrind libboost-all-dev libasio-dev

      - name: Build and run tests for changed projects
        if: steps.changed-projects.outputs.CHANGED_PROJECTS != '[]'
        run: |
          changed_projects_json="${{ steps.changed-projects.outputs.CHANGED_PROJECTS }}"
          IFS=',' read -r -a changed_projects <<< $(echo "$changed_projects_json" | jq -r '.[].""')

          for project_dir in "${changed_projects[@]}"; do
            test_dir="$project_dir/tests"
            if [ -f "$test_dir/CMakeLists.txt" ]; then
              echo "Building and testing in $test_dir"
              mkdir -p "$test_dir/build"
              cd "$test_dir/build"

              cmake -DCMAKE_BUILD_TYPE=Debug ..
              make

              valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./run_tests 2>&1 | tee valgrind_output.log
              if grep -q "ERROR SUMMARY: 0 errors from 0 contexts" valgrind_output.log; then
                echo "No memory leaks or errors detected in $project_dir."
              else
                echo "Valgrind detected errors or memory leaks in $project_dir!"
                cat valgrind_output.log
                exit 1 # Fail the workflow if tests in a changed project fail
              fi
              cd -
            else
              echo "No tests found in $test_dir for $project_dir"
            fi
          done